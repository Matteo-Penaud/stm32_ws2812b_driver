
00_ws2812b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004894  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004a20  08004a20  00014a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a68  08004a68  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a70  08004a70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  08004ae8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08004ae8  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114a4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000236f  00000000  00000000  00031544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  000338b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00034830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e96  00000000  00000000  000356c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bb7  00000000  00000000  00056556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9934  00000000  00000000  0006810d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131a41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000427c  00000000  00000000  00131a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004a08 	.word	0x08004a08

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	08004a08 	.word	0x08004a08

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fd59 	bl	8000f8a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f810 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f934 	bl	8000748 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 f914 	bl	800070c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f8e2 	bl	80006ac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004e8:	f000 f86a 	bl	80005c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ws2812b_createStrip(&htim2, TIM_CHANNEL_1, 5);
 80004ec:	2205      	movs	r2, #5
 80004ee:	2100      	movs	r1, #0
 80004f0:	4801      	ldr	r0, [pc, #4]	; (80004f8 <main+0x28>)
 80004f2:	f000 fb01 	bl	8000af8 <ws2812b_createStrip>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <main+0x26>
 80004f8:	2000008c 	.word	0x2000008c

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b096      	sub	sp, #88	; 0x58
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	2244      	movs	r2, #68	; 0x44
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f004 f9c2 	bl	8004894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	463b      	mov	r3, r7
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800051e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000522:	f001 fa51 	bl	80019c8 <HAL_PWREx_ControlVoltageScaling>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800052c:	f000 f956 	bl	80007dc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000530:	f001 fa2c 	bl	800198c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000534:	4b21      	ldr	r3, [pc, #132]	; (80005bc <SystemClock_Config+0xc0>)
 8000536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800053a:	4a20      	ldr	r2, [pc, #128]	; (80005bc <SystemClock_Config+0xc0>)
 800053c:	f023 0318 	bic.w	r3, r3, #24
 8000540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000544:	2314      	movs	r3, #20
 8000546:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000548:	2301      	movs	r3, #1
 800054a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054c:	2301      	movs	r3, #1
 800054e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000554:	2360      	movs	r3, #96	; 0x60
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	2302      	movs	r3, #2
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800055c:	2301      	movs	r3, #1
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000560:	2301      	movs	r3, #1
 8000562:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000564:	2310      	movs	r3, #16
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000568:	2307      	movs	r3, #7
 800056a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800056c:	2302      	movs	r3, #2
 800056e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4618      	mov	r0, r3
 800057a:	f001 fa7b 	bl	8001a74 <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000584:	f000 f92a 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2303      	movs	r3, #3
 800058e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059c:	463b      	mov	r3, r7
 800059e:	2101      	movs	r1, #1
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fe7b 	bl	800229c <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005ac:	f000 f916 	bl	80007dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005b0:	f002 fa8e 	bl	8002ad0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005b4:	bf00      	nop
 80005b6:	3758      	adds	r7, #88	; 0x58
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40021000 	.word	0x40021000

080005c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08e      	sub	sp, #56	; 0x38
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005f2:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <MX_TIM2_Init+0xe8>)
 80005f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005fa:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <MX_TIM2_Init+0xe8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000600:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <MX_TIM2_Init+0xe8>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40;
 8000606:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <MX_TIM2_Init+0xe8>)
 8000608:	2228      	movs	r2, #40	; 0x28
 800060a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800060c:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <MX_TIM2_Init+0xe8>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <MX_TIM2_Init+0xe8>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000618:	4823      	ldr	r0, [pc, #140]	; (80006a8 <MX_TIM2_Init+0xe8>)
 800061a:	f002 fb5b 	bl	8002cd4 <HAL_TIM_Base_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000624:	f000 f8da 	bl	80007dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800062e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000632:	4619      	mov	r1, r3
 8000634:	481c      	ldr	r0, [pc, #112]	; (80006a8 <MX_TIM2_Init+0xe8>)
 8000636:	f002 ff11 	bl	800345c <HAL_TIM_ConfigClockSource>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000640:	f000 f8cc 	bl	80007dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000644:	4818      	ldr	r0, [pc, #96]	; (80006a8 <MX_TIM2_Init+0xe8>)
 8000646:	f002 fb9c 	bl	8002d82 <HAL_TIM_PWM_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000650:	f000 f8c4 	bl	80007dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4619      	mov	r1, r3
 8000662:	4811      	ldr	r0, [pc, #68]	; (80006a8 <MX_TIM2_Init+0xe8>)
 8000664:	f003 fc54 	bl	8003f10 <HAL_TIMEx_MasterConfigSynchronization>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800066e:	f000 f8b5 	bl	80007dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000672:	2360      	movs	r3, #96	; 0x60
 8000674:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	4619      	mov	r1, r3
 8000688:	4807      	ldr	r0, [pc, #28]	; (80006a8 <MX_TIM2_Init+0xe8>)
 800068a:	f002 fdd3 	bl	8003234 <HAL_TIM_PWM_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000694:	f000 f8a2 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <MX_TIM2_Init+0xe8>)
 800069a:	f000 f913 	bl	80008c4 <HAL_TIM_MspPostInit>

}
 800069e:	bf00      	nop
 80006a0:	3738      	adds	r7, #56	; 0x38
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000008c 	.word	0x2000008c

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <MX_USART2_UART_Init+0x5c>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006f0:	f003 fc74 	bl	8003fdc <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 f86f 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000120 	.word	0x20000120
 8000708:	40004400 	.word	0x40004400

0800070c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_DMA_Init+0x38>)
 8000714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000716:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <MX_DMA_Init+0x38>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6493      	str	r3, [r2, #72]	; 0x48
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_DMA_Init+0x38>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	200f      	movs	r0, #15
 8000730:	f000 fd7b 	bl	800122a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000734:	200f      	movs	r0, #15
 8000736:	f000 fd94 	bl	8001262 <HAL_NVIC_EnableIRQ>

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_GPIO_Init+0x8c>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <MX_GPIO_Init+0x8c>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_GPIO_Init+0x8c>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_GPIO_Init+0x8c>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <MX_GPIO_Init+0x8c>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_GPIO_Init+0x8c>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_GPIO_Init+0x8c>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <MX_GPIO_Init+0x8c>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_GPIO_Init+0x8c>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2108      	movs	r1, #8
 80007aa:	480b      	ldr	r0, [pc, #44]	; (80007d8 <MX_GPIO_Init+0x90>)
 80007ac:	f001 f8d6 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80007b0:	2308      	movs	r3, #8
 80007b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4619      	mov	r1, r3
 80007c6:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_GPIO_Init+0x90>)
 80007c8:	f000 ff5e 	bl	8001688 <HAL_GPIO_Init>

}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	48000400 	.word	0x48000400

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_MspInit+0x44>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <HAL_MspInit+0x44>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6613      	str	r3, [r2, #96]	; 0x60
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_MspInit+0x44>)
 80007fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <HAL_MspInit+0x44>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <HAL_MspInit+0x44>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6593      	str	r3, [r2, #88]	; 0x58
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_MspInit+0x44>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000

08000830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000840:	d136      	bne.n	80008b0 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <HAL_TIM_Base_MspInit+0x88>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <HAL_TIM_Base_MspInit+0x88>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6593      	str	r3, [r2, #88]	; 0x58
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <HAL_TIM_Base_MspInit+0x88>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_TIM_Base_MspInit+0x8c>)
 800085c:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <HAL_TIM_Base_MspInit+0x90>)
 800085e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <HAL_TIM_Base_MspInit+0x8c>)
 8000862:	2204      	movs	r2, #4
 8000864:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_TIM_Base_MspInit+0x8c>)
 8000868:	2210      	movs	r2, #16
 800086a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <HAL_TIM_Base_MspInit+0x8c>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_TIM_Base_MspInit+0x8c>)
 8000874:	2280      	movs	r2, #128	; 0x80
 8000876:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000878:	4b10      	ldr	r3, [pc, #64]	; (80008bc <HAL_TIM_Base_MspInit+0x8c>)
 800087a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_TIM_Base_MspInit+0x8c>)
 8000882:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000886:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_TIM_Base_MspInit+0x8c>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <HAL_TIM_Base_MspInit+0x8c>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <HAL_TIM_Base_MspInit+0x8c>)
 8000896:	f000 fcff 	bl	8001298 <HAL_DMA_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80008a0:	f7ff ff9c 	bl	80007dc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <HAL_TIM_Base_MspInit+0x8c>)
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
 80008aa:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_TIM_Base_MspInit+0x8c>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	200000d8 	.word	0x200000d8
 80008c0:	40020058 	.word	0x40020058

080008c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008e4:	d11c      	bne.n	8000920 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <HAL_TIM_MspPostInit+0x64>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a0f      	ldr	r2, [pc, #60]	; (8000928 <HAL_TIM_MspPostInit+0x64>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <HAL_TIM_MspPostInit+0x64>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008fe:	2320      	movs	r3, #32
 8000900:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000906:	2301      	movs	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800090e:	2301      	movs	r3, #1
 8000910:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f000 feb4 	bl	8001688 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000920:	bf00      	nop
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b09e      	sub	sp, #120	; 0x78
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	2254      	movs	r2, #84	; 0x54
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f003 ffa1 	bl	8004894 <memset>
  if(huart->Instance==USART2)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a28      	ldr	r2, [pc, #160]	; (80009f8 <HAL_UART_MspInit+0xcc>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d148      	bne.n	80009ee <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800095c:	2302      	movs	r3, #2
 800095e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000960:	2300      	movs	r3, #0
 8000962:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4618      	mov	r0, r3
 800096a:	f001 febb 	bl	80026e4 <HAL_RCCEx_PeriphCLKConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000974:	f7ff ff32 	bl	80007dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <HAL_UART_MspInit+0xd0>)
 800097a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097c:	4a1f      	ldr	r2, [pc, #124]	; (80009fc <HAL_UART_MspInit+0xd0>)
 800097e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000982:	6593      	str	r3, [r2, #88]	; 0x58
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <HAL_UART_MspInit+0xd0>)
 8000986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <HAL_UART_MspInit+0xd0>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000994:	4a19      	ldr	r2, [pc, #100]	; (80009fc <HAL_UART_MspInit+0xd0>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <HAL_UART_MspInit+0xd0>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009a8:	2304      	movs	r3, #4
 80009aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b8:	2307      	movs	r3, #7
 80009ba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009c0:	4619      	mov	r1, r3
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c6:	f000 fe5f 	bl	8001688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80009ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80009dc:	2303      	movs	r3, #3
 80009de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009e4:	4619      	mov	r1, r3
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ea:	f000 fe4d 	bl	8001688 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3778      	adds	r7, #120	; 0x78
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40004400 	.word	0x40004400
 80009fc:	40021000 	.word	0x40021000

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4c:	f000 faf2 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <DMA1_Channel5_IRQHandler+0x10>)
 8000a5a:	f000 fd35 	bl	80014c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000d8 	.word	0x200000d8

08000a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a70:	4a14      	ldr	r2, [pc, #80]	; (8000ac4 <_sbrk+0x5c>)
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <_sbrk+0x60>)
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d102      	bne.n	8000a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <_sbrk+0x64>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <_sbrk+0x68>)
 8000a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d207      	bcs.n	8000aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a98:	f003 feca 	bl	8004830 <__errno>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aa6:	e009      	b.n	8000abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <_sbrk+0x64>)
 8000ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aba:	68fb      	ldr	r3, [r7, #12]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20010000 	.word	0x20010000
 8000ac8:	00000400 	.word	0x00000400
 8000acc:	200001a4 	.word	0x200001a4
 8000ad0:	200001c8 	.word	0x200001c8

08000ad4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <SystemInit+0x20>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <SystemInit+0x20>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <ws2812b_createStrip>:

t_s_ws2812b_sequencer mainSequencer =
	{ .entryPoint = NULL, .tailPoint = NULL };

void ws2812b_createStrip( TIM_HandleTypeDef *htim, uint32_t timerChannel, uint32_t stripSize )
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
	static uint32_t stripId;
	t_s_ws2812b_strip *cursor = NULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

	if(mainSequencer.entryPoint == NULL)
 8000b08:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <ws2812b_createStrip+0xbc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d119      	bne.n	8000b44 <ws2812b_createStrip+0x4c>
	{
		stripId = 0;
 8000b10:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <ws2812b_createStrip+0xc0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
		mainSequencer.entryPoint = (t_s_ws2812b_strip *)malloc(sizeof(t_s_ws2812b_strip));
 8000b16:	201c      	movs	r0, #28
 8000b18:	f003 feb4 	bl	8004884 <malloc>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <ws2812b_createStrip+0xbc>)
 8000b22:	601a      	str	r2, [r3, #0]
		mainSequencer.tailPoint = mainSequencer.entryPoint;
 8000b24:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <ws2812b_createStrip+0xbc>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a22      	ldr	r2, [pc, #136]	; (8000bb4 <ws2812b_createStrip+0xbc>)
 8000b2a:	6053      	str	r3, [r2, #4]

		mainSequencer.entryPoint->next = NULL;
 8000b2c:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <ws2812b_createStrip+0xbc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
		mainSequencer.entryPoint->prev = NULL;
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <ws2812b_createStrip+0xbc>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]

		cursor = mainSequencer.entryPoint;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <ws2812b_createStrip+0xbc>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	e017      	b.n	8000b74 <ws2812b_createStrip+0x7c>
	}
	else
	{
		cursor = mainSequencer.tailPoint;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <ws2812b_createStrip+0xbc>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	617b      	str	r3, [r7, #20]

		cursor->next = (uint32_t *)malloc(sizeof(t_s_ws2812b_strip));
 8000b4a:	201c      	movs	r0, #28
 8000b4c:	f003 fe9a 	bl	8004884 <malloc>
 8000b50:	4603      	mov	r3, r0
 8000b52:	461a      	mov	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	605a      	str	r2, [r3, #4]
		cursor = (t_s_ws2812b_strip *)cursor->next;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	617b      	str	r3, [r7, #20]
		cursor->next = (uint32_t *)mainSequencer.entryPoint;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <ws2812b_createStrip+0xbc>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	605a      	str	r2, [r3, #4]
		cursor->prev = (uint32_t *)mainSequencer.tailPoint;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <ws2812b_createStrip+0xbc>)
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	601a      	str	r2, [r3, #0]
		mainSequencer.tailPoint = cursor;
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <ws2812b_createStrip+0xbc>)
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	6053      	str	r3, [r2, #4]
	}

	cursor->id = stripId;
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <ws2812b_createStrip+0xc0>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	611a      	str	r2, [r3, #16]
	cursor->htim = htim;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	609a      	str	r2, [r3, #8]
	cursor->timerChannel = timerChannel;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	68ba      	ldr	r2, [r7, #8]
 8000b86:	60da      	str	r2, [r3, #12]
	cursor->stripSize = stripSize;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	615a      	str	r2, [r3, #20]

	ws2812b_createLeds(stripId);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <ws2812b_createStrip+0xc0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f812 	bl	8000bbc <ws2812b_createLeds>
	ws2812b_sendStrip(stripId);
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <ws2812b_createStrip+0xc0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 f976 	bl	8000e8e <ws2812b_sendStrip>

	stripId++;
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <ws2812b_createStrip+0xc0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	4a03      	ldr	r2, [pc, #12]	; (8000bb8 <ws2812b_createStrip+0xc0>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200001a8 	.word	0x200001a8
 8000bb8:	200001b0 	.word	0x200001b0

08000bbc <ws2812b_createLeds>:

void ws2812b_createLeds( uint32_t stripId )
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	t_s_ws2812b_strip	*stripCursor = ws2812b_findStripById(stripId);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 f851 	bl	8000c6c <ws2812b_findStripById>
 8000bca:	60f8      	str	r0, [r7, #12]
	t_s_ws2812b_led 	*ledCursor = NULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

	uint32_t ledIndex = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]

	while(ledIndex < stripCursor->stripSize)
 8000bd4:	e040      	b.n	8000c58 <ws2812b_createLeds+0x9c>
	{
		if(ledIndex == 0)
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d110      	bne.n	8000bfe <ws2812b_createLeds+0x42>
		{
			stripCursor->firstLed = (t_s_ws2812b_led *)malloc(sizeof(t_s_ws2812b_led));
 8000bdc:	2010      	movs	r0, #16
 8000bde:	f003 fe51 	bl	8004884 <malloc>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	619a      	str	r2, [r3, #24]
			ledCursor = stripCursor->firstLed;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	617b      	str	r3, [r7, #20]

			ledCursor->next = (uint32_t *)ledCursor;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	605a      	str	r2, [r3, #4]
			ledCursor->prev = (uint32_t *)ledCursor;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	e01a      	b.n	8000c34 <ws2812b_createLeds+0x78>
		}
		else
		{
			ledCursor = (t_s_ws2812b_led *)stripCursor->firstLed->prev;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	617b      	str	r3, [r7, #20]

			ledCursor->next = (uint32_t *)malloc(sizeof(t_s_ws2812b_led));
 8000c06:	2010      	movs	r0, #16
 8000c08:	f003 fe3c 	bl	8004884 <malloc>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	605a      	str	r2, [r3, #4]
			ledCursor = (t_s_ws2812b_led *)ledCursor->next;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	617b      	str	r3, [r7, #20]
			ledCursor->next = (uint32_t *)stripCursor->firstLed;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	699a      	ldr	r2, [r3, #24]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	605a      	str	r2, [r3, #4]
			ledCursor->prev = (uint32_t *)stripCursor->firstLed->prev;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	609a      	str	r2, [r3, #8]
			stripCursor->firstLed->prev = (uint32_t *)ledCursor;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	609a      	str	r2, [r3, #8]
		}

		ledCursor->ledId = ledIndex;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	601a      	str	r2, [r3, #0]
		ledCursor->rgbaColor.red = 30;
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	221e      	movs	r2, #30
 8000c3e:	731a      	strb	r2, [r3, #12]
		ledCursor->rgbaColor.green = 0;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	2200      	movs	r2, #0
 8000c44:	735a      	strb	r2, [r3, #13]
		ledCursor->rgbaColor.blue = 0;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	739a      	strb	r2, [r3, #14]
		ledCursor->rgbaColor.alpha = 0;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	73da      	strb	r2, [r3, #15]

		ledIndex++;
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	3301      	adds	r3, #1
 8000c56:	613b      	str	r3, [r7, #16]
	while(ledIndex < stripCursor->stripSize)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d3b9      	bcc.n	8000bd6 <ws2812b_createLeds+0x1a>
	}
}
 8000c62:	bf00      	nop
 8000c64:	bf00      	nop
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <ws2812b_findStripById>:
		ledCursor = (t_s_ws2812b_led *)ledCursor->next;
	}
}

t_s_ws2812b_strip * ws2812b_findStripById( uint32_t stripId )
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	t_s_ws2812b_strip *cursor;

	if((mainSequencer.tailPoint->id / 2) < stripId)
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <ws2812b_findStripById+0x58>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	085b      	lsrs	r3, r3, #1
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d90c      	bls.n	8000c9c <ws2812b_findStripById+0x30>
	{
		cursor = mainSequencer.tailPoint;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <ws2812b_findStripById+0x58>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	60fb      	str	r3, [r7, #12]

		while(cursor->id != stripId)
 8000c88:	e002      	b.n	8000c90 <ws2812b_findStripById+0x24>
		{
			cursor = (t_s_ws2812b_strip *)cursor->prev;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	60fb      	str	r3, [r7, #12]
		while(cursor->id != stripId)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d1f7      	bne.n	8000c8a <ws2812b_findStripById+0x1e>
 8000c9a:	e00b      	b.n	8000cb4 <ws2812b_findStripById+0x48>
		}
	}
	else
	{
		cursor = mainSequencer.entryPoint;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <ws2812b_findStripById+0x58>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	60fb      	str	r3, [r7, #12]

		while(cursor->id != stripId)
 8000ca2:	e002      	b.n	8000caa <ws2812b_findStripById+0x3e>
		{
			cursor = (t_s_ws2812b_strip *)cursor->next;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	60fb      	str	r3, [r7, #12]
		while(cursor->id != stripId)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d1f7      	bne.n	8000ca4 <ws2812b_findStripById+0x38>
		}
	}

	return cursor;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	200001a8 	.word	0x200001a8

08000cc8 <ws2812b_generatePWMArray>:

void ws2812b_generatePWMArray( uint32_t stripId, uint32_t *result )
{
 8000cc8:	b5b0      	push	{r4, r5, r7, lr}
 8000cca:	b08e      	sub	sp, #56	; 0x38
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
	t_s_ws2812b_strip strip = *ws2812b_findStripById(stripId);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffca 	bl	8000c6c <ws2812b_findStripById>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f107 040c 	add.w	r4, r7, #12
 8000cde:	461d      	mov	r5, r3
 8000ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	t_s_ws2812b_led *cursor = strip.firstLed;
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28

	for(uint32_t led = 0; led < strip.stripSize; led++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8000cf4:	e0ab      	b.n	8000e4e <ws2812b_generatePWMArray+0x186>
	{
		for(uint8_t i = 0; i < 8; i++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000cfc:	e02e      	b.n	8000d5c <ws2812b_generatePWMArray+0x94>
		{
			if(cursor->rgbaColor.green & (1 << (7-i)))
 8000cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d00:	7b5b      	ldrb	r3, [r3, #13]
 8000d02:	461a      	mov	r2, r3
 8000d04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d08:	f1c3 0307 	rsb	r3, r3, #7
 8000d0c:	fa42 f303 	asr.w	r3, r2, r3
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00e      	beq.n	8000d36 <ws2812b_generatePWMArray+0x6e>
				result[(24*led)+i] = WS2812B_MAX_PWM;
 8000d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	461a      	mov	r2, r3
 8000d24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d28:	4413      	add	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	2219      	movs	r2, #25
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	e00d      	b.n	8000d52 <ws2812b_generatePWMArray+0x8a>
			else
				result[(24*led)+i] = WS2812B_MIN_PWM;
 8000d36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d38:	4613      	mov	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	461a      	mov	r2, r3
 8000d42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d46:	4413      	add	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	220f      	movs	r2, #15
 8000d50:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < 8; i++)
 8000d52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d56:	3301      	adds	r3, #1
 8000d58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000d5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d60:	2b07      	cmp	r3, #7
 8000d62:	d9cc      	bls.n	8000cfe <ws2812b_generatePWMArray+0x36>
		}

		for(uint8_t i = 0; i < 8; i++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8000d6a:	e030      	b.n	8000dce <ws2812b_generatePWMArray+0x106>
		{
			if(cursor->rgbaColor.red & (1 << (7-i)))
 8000d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6e:	7b1b      	ldrb	r3, [r3, #12]
 8000d70:	461a      	mov	r2, r3
 8000d72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	fa42 f303 	asr.w	r3, r2, r3
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00f      	beq.n	8000da6 <ws2812b_generatePWMArray+0xde>
				result[(24*led)+i+8] = WS2812B_MAX_PWM;
 8000d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	461a      	mov	r2, r3
 8000d92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000d96:	4413      	add	r3, r2
 8000d98:	3308      	adds	r3, #8
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	2219      	movs	r2, #25
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	e00e      	b.n	8000dc4 <ws2812b_generatePWMArray+0xfc>
			else
				result[(24*led)+i+8] = WS2812B_MIN_PWM;
 8000da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	461a      	mov	r2, r3
 8000db2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000db6:	4413      	add	r3, r2
 8000db8:	3308      	adds	r3, #8
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < 8; i++)
 8000dc4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000dc8:	3301      	adds	r3, #1
 8000dca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8000dce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000dd2:	2b07      	cmp	r3, #7
 8000dd4:	d9ca      	bls.n	8000d6c <ws2812b_generatePWMArray+0xa4>
		}

		for(uint8_t i = 0; i < 8; i++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8000ddc:	e030      	b.n	8000e40 <ws2812b_generatePWMArray+0x178>
		{
			if(cursor->rgbaColor.blue & (1 << (7-i)))
 8000dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de0:	7b9b      	ldrb	r3, [r3, #14]
 8000de2:	461a      	mov	r2, r3
 8000de4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000de8:	f1c3 0307 	rsb	r3, r3, #7
 8000dec:	fa42 f303 	asr.w	r3, r2, r3
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d00f      	beq.n	8000e18 <ws2812b_generatePWMArray+0x150>
				result[(24*led)+i+16] = WS2812B_MAX_PWM;
 8000df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	461a      	mov	r2, r3
 8000e04:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000e08:	4413      	add	r3, r2
 8000e0a:	3310      	adds	r3, #16
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	4413      	add	r3, r2
 8000e12:	2219      	movs	r2, #25
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e00e      	b.n	8000e36 <ws2812b_generatePWMArray+0x16e>
			else
				result[(24*led)+i+16] = WS2812B_MIN_PWM;
 8000e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	4413      	add	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	461a      	mov	r2, r3
 8000e24:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000e28:	4413      	add	r3, r2
 8000e2a:	3310      	adds	r3, #16
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	4413      	add	r3, r2
 8000e32:	220f      	movs	r2, #15
 8000e34:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < 8; i++)
 8000e36:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8000e40:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000e44:	2b07      	cmp	r3, #7
 8000e46:	d9ca      	bls.n	8000dde <ws2812b_generatePWMArray+0x116>
	for(uint32_t led = 0; led < strip.stripSize; led++)
 8000e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
 8000e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e52:	429a      	cmp	r2, r3
 8000e54:	f4ff af4f 	bcc.w	8000cf6 <ws2812b_generatePWMArray+0x2e>
		}
	}

	for(uint32_t i=0; i < 50; i++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e5c:	e00f      	b.n	8000e7e <ws2812b_generatePWMArray+0x1b6>
		result[i+(24*strip.stripSize)] = 0;
 8000e5e:	6a3a      	ldr	r2, [r7, #32]
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6c:	4413      	add	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
	for(uint32_t i=0; i < 50; i++)
 8000e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e80:	2b31      	cmp	r3, #49	; 0x31
 8000e82:	d9ec      	bls.n	8000e5e <ws2812b_generatePWMArray+0x196>
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3738      	adds	r7, #56	; 0x38
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bdb0      	pop	{r4, r5, r7, pc}

08000e8e <ws2812b_sendStrip>:

void ws2812b_sendStrip( uint32_t stripId )
{
 8000e8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	466b      	mov	r3, sp
 8000e9a:	461e      	mov	r6, r3
	t_s_ws2812b_strip *stripCursor = ws2812b_findStripById(stripId);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff fee5 	bl	8000c6c <ws2812b_findStripById>
 8000ea2:	6178      	str	r0, [r7, #20]
	uint32_t stripToSend[(24*stripCursor->stripSize)+50];
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	695a      	ldr	r2, [r3, #20]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	f103 0132 	add.w	r1, r3, #50	; 0x32
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	4688      	mov	r8, r1
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000ecc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000ed0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	460c      	mov	r4, r1
 8000ed8:	461d      	mov	r5, r3
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	016b      	lsls	r3, r5, #5
 8000ee4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000ee8:	0162      	lsls	r2, r4, #5
 8000eea:	008b      	lsls	r3, r1, #2
 8000eec:	3307      	adds	r3, #7
 8000eee:	08db      	lsrs	r3, r3, #3
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	ebad 0d03 	sub.w	sp, sp, r3
 8000ef6:	466b      	mov	r3, sp
 8000ef8:	3303      	adds	r3, #3
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	60fb      	str	r3, [r7, #12]

	ws2812b_generatePWMArray(stripId, stripToSend);
 8000f00:	68f9      	ldr	r1, [r7, #12]
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff fee0 	bl	8000cc8 <ws2812b_generatePWMArray>

	HAL_TIM_PWM_Start_DMA(stripCursor->htim, stripCursor->timerChannel, (uint32_t *)&stripToSend, (24*stripCursor->stripSize)+50);
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	6898      	ldr	r0, [r3, #8]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	68d9      	ldr	r1, [r3, #12]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	0052      	lsls	r2, r2, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	3332      	adds	r3, #50	; 0x32
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	f001 ff8d 	bl	8002e44 <HAL_TIM_PWM_Start_DMA>
 8000f2a:	46b5      	mov	sp, r6
}
 8000f2c:	bf00      	nop
 8000f2e:	371c      	adds	r7, #28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000f38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f3c:	f7ff fdca 	bl	8000ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	; (8000f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <LoopForever+0xe>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	; (8000f84 <LoopForever+0x16>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f66:	f003 fc69 	bl	800483c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f6a:	f7ff fab1 	bl	80004d0 <main>

08000f6e <LoopForever>:

LoopForever:
    b LoopForever
 8000f6e:	e7fe      	b.n	8000f6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f70:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f7c:	08004a78 	.word	0x08004a78
  ldr r2, =_sbss
 8000f80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f84:	200001c8 	.word	0x200001c8

08000f88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC1_IRQHandler>

08000f8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 f93d 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 f80e 	bl	8000fbc <HAL_InitTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	e001      	b.n	8000fb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fac:	f7ff fc1c 	bl	80007e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <HAL_InitTick+0x6c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d023      	beq.n	8001018 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <HAL_InitTick+0x70>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <HAL_InitTick+0x6c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f949 	bl	800127e <HAL_SYSTICK_Config>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10f      	bne.n	8001012 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d809      	bhi.n	800100c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001000:	f000 f913 	bl	800122a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_InitTick+0x74>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e007      	b.n	800101c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	e004      	b.n	800101c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e001      	b.n	800101c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008
 800102c:	20000000 	.word	0x20000000
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008
 8001058:	200001b4 	.word	0x200001b4

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200001b4 	.word	0x200001b4

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4907      	ldr	r1, [pc, #28]	; (8001110 <__NVIC_EnableIRQ+0x38>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f4:	f7ff ff8e 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff29 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800123c:	f7ff ff3e 	bl	80010bc <__NVIC_GetPriorityGrouping>
 8001240:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff8e 	bl	8001168 <NVIC_EncodePriority>
 800124c:	4602      	mov	r2, r0
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff5d 	bl	8001114 <__NVIC_SetPriority>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff31 	bl	80010d8 <__NVIC_EnableIRQ>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffa2 	bl	80011d0 <SysTick_Config>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e098      	b.n	80013dc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b4d      	ldr	r3, [pc, #308]	; (80013e8 <HAL_DMA_Init+0x150>)
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d80f      	bhi.n	80012d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b4b      	ldr	r3, [pc, #300]	; (80013ec <HAL_DMA_Init+0x154>)
 80012be:	4413      	add	r3, r2
 80012c0:	4a4b      	ldr	r2, [pc, #300]	; (80013f0 <HAL_DMA_Init+0x158>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	009a      	lsls	r2, r3, #2
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a48      	ldr	r2, [pc, #288]	; (80013f4 <HAL_DMA_Init+0x15c>)
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
 80012d4:	e00e      	b.n	80012f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	4b46      	ldr	r3, [pc, #280]	; (80013f8 <HAL_DMA_Init+0x160>)
 80012de:	4413      	add	r3, r2
 80012e0:	4a43      	ldr	r2, [pc, #268]	; (80013f0 <HAL_DMA_Init+0x158>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	009a      	lsls	r2, r3, #2
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a42      	ldr	r2, [pc, #264]	; (80013fc <HAL_DMA_Init+0x164>)
 80012f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2202      	movs	r2, #2
 80012f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800130a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800130e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800134e:	d039      	beq.n	80013c4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	4a27      	ldr	r2, [pc, #156]	; (80013f4 <HAL_DMA_Init+0x15c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d11a      	bne.n	8001390 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800135a:	4b29      	ldr	r3, [pc, #164]	; (8001400 <HAL_DMA_Init+0x168>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f003 031c 	and.w	r3, r3, #28
 8001366:	210f      	movs	r1, #15
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	4924      	ldr	r1, [pc, #144]	; (8001400 <HAL_DMA_Init+0x168>)
 8001370:	4013      	ands	r3, r2
 8001372:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001374:	4b22      	ldr	r3, [pc, #136]	; (8001400 <HAL_DMA_Init+0x168>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6859      	ldr	r1, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	f003 031c 	and.w	r3, r3, #28
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	491d      	ldr	r1, [pc, #116]	; (8001400 <HAL_DMA_Init+0x168>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
 800138e:	e019      	b.n	80013c4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <HAL_DMA_Init+0x16c>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001398:	f003 031c 	and.w	r3, r3, #28
 800139c:	210f      	movs	r1, #15
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	4917      	ldr	r1, [pc, #92]	; (8001404 <HAL_DMA_Init+0x16c>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <HAL_DMA_Init+0x16c>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6859      	ldr	r1, [r3, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f003 031c 	and.w	r3, r3, #28
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	4911      	ldr	r1, [pc, #68]	; (8001404 <HAL_DMA_Init+0x16c>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	40020407 	.word	0x40020407
 80013ec:	bffdfff8 	.word	0xbffdfff8
 80013f0:	cccccccd 	.word	0xcccccccd
 80013f4:	40020000 	.word	0x40020000
 80013f8:	bffdfbf8 	.word	0xbffdfbf8
 80013fc:	40020400 	.word	0x40020400
 8001400:	400200a8 	.word	0x400200a8
 8001404:	400204a8 	.word	0x400204a8

08001408 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <HAL_DMA_Start_IT+0x20>
 8001424:	2302      	movs	r3, #2
 8001426:	e04b      	b.n	80014c0 <HAL_DMA_Start_IT+0xb8>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d13a      	bne.n	80014b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f000 f8e0 	bl	8001626 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	2b00      	cmp	r3, #0
 800146c:	d008      	beq.n	8001480 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 020e 	orr.w	r2, r2, #14
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	e00f      	b.n	80014a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0204 	bic.w	r2, r2, #4
 800148e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 020a 	orr.w	r2, r2, #10
 800149e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0201 	orr.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	e005      	b.n	80014be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80014ba:	2302      	movs	r3, #2
 80014bc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80014be:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	f003 031c 	and.w	r3, r3, #28
 80014e8:	2204      	movs	r2, #4
 80014ea:	409a      	lsls	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d026      	beq.n	8001542 <HAL_DMA_IRQHandler+0x7a>
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d021      	beq.n	8001542 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0320 	and.w	r3, r3, #32
 8001508:	2b00      	cmp	r3, #0
 800150a:	d107      	bne.n	800151c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0204 	bic.w	r2, r2, #4
 800151a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001520:	f003 021c 	and.w	r2, r3, #28
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	2104      	movs	r1, #4
 800152a:	fa01 f202 	lsl.w	r2, r1, r2
 800152e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	2b00      	cmp	r3, #0
 8001536:	d071      	beq.n	800161c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001540:	e06c      	b.n	800161c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f003 031c 	and.w	r3, r3, #28
 800154a:	2202      	movs	r2, #2
 800154c:	409a      	lsls	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4013      	ands	r3, r2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d02e      	beq.n	80015b4 <HAL_DMA_IRQHandler+0xec>
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d029      	beq.n	80015b4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10b      	bne.n	8001586 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 020a 	bic.w	r2, r2, #10
 800157c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f003 021c 	and.w	r2, r3, #28
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	2102      	movs	r1, #2
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d038      	beq.n	800161c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015b2:	e033      	b.n	800161c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b8:	f003 031c 	and.w	r3, r3, #28
 80015bc:	2208      	movs	r2, #8
 80015be:	409a      	lsls	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4013      	ands	r3, r2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d02a      	beq.n	800161e <HAL_DMA_IRQHandler+0x156>
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d025      	beq.n	800161e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 020e 	bic.w	r2, r2, #14
 80015e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f003 021c 	and.w	r2, r3, #28
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001610:	2b00      	cmp	r3, #0
 8001612:	d004      	beq.n	800161e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800161c:	bf00      	nop
 800161e:	bf00      	nop
}
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001626:	b480      	push	{r7}
 8001628:	b085      	sub	sp, #20
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001638:	f003 021c 	and.w	r2, r3, #28
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	2101      	movs	r1, #1
 8001642:	fa01 f202 	lsl.w	r2, r1, r2
 8001646:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b10      	cmp	r3, #16
 8001656:	d108      	bne.n	800166a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001668:	e007      	b.n	800167a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	60da      	str	r2, [r3, #12]
}
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001688:	b480      	push	{r7}
 800168a:	b087      	sub	sp, #28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001696:	e148      	b.n	800192a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2101      	movs	r1, #1
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	4013      	ands	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 813a 	beq.w	8001924 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d005      	beq.n	80016c8 <HAL_GPIO_Init+0x40>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d130      	bne.n	800172a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016fe:	2201      	movs	r2, #1
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	091b      	lsrs	r3, r3, #4
 8001714:	f003 0201 	and.w	r2, r3, #1
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b03      	cmp	r3, #3
 8001734:	d017      	beq.n	8001766 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	2203      	movs	r2, #3
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d123      	bne.n	80017ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	08da      	lsrs	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3208      	adds	r2, #8
 800177a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	220f      	movs	r2, #15
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	691a      	ldr	r2, [r3, #16]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	08da      	lsrs	r2, r3, #3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3208      	adds	r2, #8
 80017b4:	6939      	ldr	r1, [r7, #16]
 80017b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	2203      	movs	r2, #3
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0203 	and.w	r2, r3, #3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8094 	beq.w	8001924 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fc:	4b52      	ldr	r3, [pc, #328]	; (8001948 <HAL_GPIO_Init+0x2c0>)
 80017fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001800:	4a51      	ldr	r2, [pc, #324]	; (8001948 <HAL_GPIO_Init+0x2c0>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6613      	str	r3, [r2, #96]	; 0x60
 8001808:	4b4f      	ldr	r3, [pc, #316]	; (8001948 <HAL_GPIO_Init+0x2c0>)
 800180a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001814:	4a4d      	ldr	r2, [pc, #308]	; (800194c <HAL_GPIO_Init+0x2c4>)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800183e:	d00d      	beq.n	800185c <HAL_GPIO_Init+0x1d4>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a43      	ldr	r2, [pc, #268]	; (8001950 <HAL_GPIO_Init+0x2c8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_Init+0x1d0>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a42      	ldr	r2, [pc, #264]	; (8001954 <HAL_GPIO_Init+0x2cc>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_GPIO_Init+0x1cc>
 8001850:	2302      	movs	r3, #2
 8001852:	e004      	b.n	800185e <HAL_GPIO_Init+0x1d6>
 8001854:	2307      	movs	r3, #7
 8001856:	e002      	b.n	800185e <HAL_GPIO_Init+0x1d6>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_GPIO_Init+0x1d6>
 800185c:	2300      	movs	r3, #0
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	f002 0203 	and.w	r2, r2, #3
 8001864:	0092      	lsls	r2, r2, #2
 8001866:	4093      	lsls	r3, r2
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800186e:	4937      	ldr	r1, [pc, #220]	; (800194c <HAL_GPIO_Init+0x2c4>)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800187c:	4b36      	ldr	r3, [pc, #216]	; (8001958 <HAL_GPIO_Init+0x2d0>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018a0:	4a2d      	ldr	r2, [pc, #180]	; (8001958 <HAL_GPIO_Init+0x2d0>)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018a6:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <HAL_GPIO_Init+0x2d0>)
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018ca:	4a23      	ldr	r2, [pc, #140]	; (8001958 <HAL_GPIO_Init+0x2d0>)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018d0:	4b21      	ldr	r3, [pc, #132]	; (8001958 <HAL_GPIO_Init+0x2d0>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018f4:	4a18      	ldr	r2, [pc, #96]	; (8001958 <HAL_GPIO_Init+0x2d0>)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <HAL_GPIO_Init+0x2d0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800191e:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_GPIO_Init+0x2d0>)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	fa22 f303 	lsr.w	r3, r2, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	f47f aeaf 	bne.w	8001698 <HAL_GPIO_Init+0x10>
  }
}
 800193a:	bf00      	nop
 800193c:	bf00      	nop
 800193e:	371c      	adds	r7, #28
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40021000 	.word	0x40021000
 800194c:	40010000 	.word	0x40010000
 8001950:	48000400 	.word	0x48000400
 8001954:	48000800 	.word	0x48000800
 8001958:	40010400 	.word	0x40010400

0800195c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
 8001968:	4613      	mov	r3, r2
 800196a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001978:	e002      	b.n	8001980 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40007000 	.word	0x40007000

080019ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40007000 	.word	0x40007000

080019c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d6:	d130      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e4:	d038      	beq.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ee:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2232      	movs	r2, #50	; 0x32
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	0c9b      	lsrs	r3, r3, #18
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a0c:	e002      	b.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a20:	d102      	bne.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f2      	bne.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a34:	d110      	bne.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e00f      	b.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a46:	d007      	beq.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a50:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	431bde83 	.word	0x431bde83

08001a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f000 bc02 	b.w	800228c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a88:	4b96      	ldr	r3, [pc, #600]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a92:	4b94      	ldr	r3, [pc, #592]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0310 	and.w	r3, r3, #16
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80e4 	beq.w	8001c72 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d007      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x4c>
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	f040 808b 	bne.w	8001bce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	f040 8087 	bne.w	8001bce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ac0:	4b88      	ldr	r3, [pc, #544]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x64>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e3d9      	b.n	800228c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1a      	ldr	r2, [r3, #32]
 8001adc:	4b81      	ldr	r3, [pc, #516]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d004      	beq.n	8001af2 <HAL_RCC_OscConfig+0x7e>
 8001ae8:	4b7e      	ldr	r3, [pc, #504]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af0:	e005      	b.n	8001afe <HAL_RCC_OscConfig+0x8a>
 8001af2:	4b7c      	ldr	r3, [pc, #496]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d223      	bcs.n	8001b4a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fd8c 	bl	8002624 <RCC_SetFlashLatencyFromMSIRange>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e3ba      	b.n	800228c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b16:	4b73      	ldr	r3, [pc, #460]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a72      	ldr	r2, [pc, #456]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b70      	ldr	r3, [pc, #448]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	496d      	ldr	r1, [pc, #436]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b34:	4b6b      	ldr	r3, [pc, #428]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	4968      	ldr	r1, [pc, #416]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
 8001b48:	e025      	b.n	8001b96 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b4a:	4b66      	ldr	r3, [pc, #408]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a65      	ldr	r2, [pc, #404]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b63      	ldr	r3, [pc, #396]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	4960      	ldr	r1, [pc, #384]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b68:	4b5e      	ldr	r3, [pc, #376]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	495b      	ldr	r1, [pc, #364]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d109      	bne.n	8001b96 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 fd4c 	bl	8002624 <RCC_SetFlashLatencyFromMSIRange>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e37a      	b.n	800228c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b96:	f000 fc81 	bl	800249c <HAL_RCC_GetSysClockFreq>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	4b51      	ldr	r3, [pc, #324]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	4950      	ldr	r1, [pc, #320]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	5ccb      	ldrb	r3, [r1, r3]
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb2:	4a4e      	ldr	r2, [pc, #312]	; (8001cec <HAL_RCC_OscConfig+0x278>)
 8001bb4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bb6:	4b4e      	ldr	r3, [pc, #312]	; (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f9fe 	bl	8000fbc <HAL_InitTick>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d052      	beq.n	8001c70 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	e35e      	b.n	800228c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d032      	beq.n	8001c3c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bd6:	4b43      	ldr	r3, [pc, #268]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a42      	ldr	r2, [pc, #264]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001be2:	f7ff fa3b 	bl	800105c <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bea:	f7ff fa37 	bl	800105c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e347      	b.n	800228c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bfc:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c08:	4b36      	ldr	r3, [pc, #216]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a35      	ldr	r2, [pc, #212]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	f043 0308 	orr.w	r3, r3, #8
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b33      	ldr	r3, [pc, #204]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4930      	ldr	r1, [pc, #192]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c26:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	492b      	ldr	r1, [pc, #172]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
 8001c3a:	e01a      	b.n	8001c72 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c3c:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a28      	ldr	r2, [pc, #160]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c42:	f023 0301 	bic.w	r3, r3, #1
 8001c46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c48:	f7ff fa08 	bl	800105c <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c50:	f7ff fa04 	bl	800105c <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e314      	b.n	800228c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x1dc>
 8001c6e:	e000      	b.n	8001c72 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d073      	beq.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_OscConfig+0x21c>
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2b0c      	cmp	r3, #12
 8001c88:	d10e      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d10b      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d063      	beq.n	8001d64 <HAL_RCC_OscConfig+0x2f0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d15f      	bne.n	8001d64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e2f1      	b.n	800228c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb0:	d106      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x24c>
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e025      	b.n	8001d0c <HAL_RCC_OscConfig+0x298>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc8:	d114      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x280>
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a02      	ldr	r2, [pc, #8]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e013      	b.n	8001d0c <HAL_RCC_OscConfig+0x298>
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	08004a20 	.word	0x08004a20
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000004 	.word	0x20000004
 8001cf4:	4ba0      	ldr	r3, [pc, #640]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a9f      	ldr	r2, [pc, #636]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b9d      	ldr	r3, [pc, #628]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a9c      	ldr	r2, [pc, #624]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff f9a2 	bl	800105c <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff f99e 	bl	800105c <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e2ae      	b.n	800228c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2e:	4b92      	ldr	r3, [pc, #584]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x2a8>
 8001d3a:	e014      	b.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f98e 	bl	800105c <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff f98a 	bl	800105c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e29a      	b.n	800228c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d56:	4b88      	ldr	r3, [pc, #544]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x2d0>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d060      	beq.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_OscConfig+0x310>
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	d119      	bne.n	8001db2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d116      	bne.n	8001db2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d84:	4b7c      	ldr	r3, [pc, #496]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_OscConfig+0x328>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e277      	b.n	800228c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b76      	ldr	r3, [pc, #472]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	061b      	lsls	r3, r3, #24
 8001daa:	4973      	ldr	r1, [pc, #460]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db0:	e040      	b.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d023      	beq.n	8001e02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dba:	4b6f      	ldr	r3, [pc, #444]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a6e      	ldr	r2, [pc, #440]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7ff f949 	bl	800105c <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dce:	f7ff f945 	bl	800105c <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e255      	b.n	800228c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de0:	4b65      	ldr	r3, [pc, #404]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b62      	ldr	r3, [pc, #392]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	061b      	lsls	r3, r3, #24
 8001dfa:	495f      	ldr	r1, [pc, #380]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
 8001e00:	e018      	b.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e02:	4b5d      	ldr	r3, [pc, #372]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a5c      	ldr	r2, [pc, #368]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0e:	f7ff f925 	bl	800105c <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff f921 	bl	800105c <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e231      	b.n	800228c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e28:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d03c      	beq.n	8001eba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01c      	beq.n	8001e82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e48:	4b4b      	ldr	r3, [pc, #300]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e4e:	4a4a      	ldr	r2, [pc, #296]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff f900 	bl	800105c <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff f8fc 	bl	800105c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e20c      	b.n	800228c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e72:	4b41      	ldr	r3, [pc, #260]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ef      	beq.n	8001e60 <HAL_RCC_OscConfig+0x3ec>
 8001e80:	e01b      	b.n	8001eba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e82:	4b3d      	ldr	r3, [pc, #244]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e88:	4a3b      	ldr	r2, [pc, #236]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e92:	f7ff f8e3 	bl	800105c <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9a:	f7ff f8df 	bl	800105c <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e1ef      	b.n	800228c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eac:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1ef      	bne.n	8001e9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 80a6 	beq.w	8002014 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10d      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	4a26      	ldr	r2, [pc, #152]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef4:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <HAL_RCC_OscConfig+0x508>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d118      	bne.n	8001f32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_RCC_OscConfig+0x508>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <HAL_RCC_OscConfig+0x508>)
 8001f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0c:	f7ff f8a6 	bl	800105c <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f14:	f7ff f8a2 	bl	800105c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e1b2      	b.n	800228c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_RCC_OscConfig+0x508>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d108      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4d8>
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f40:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f4a:	e029      	b.n	8001fa0 <HAL_RCC_OscConfig+0x52c>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d115      	bne.n	8001f80 <HAL_RCC_OscConfig+0x50c>
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5a:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	4a03      	ldr	r2, [pc, #12]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f74:	e014      	b.n	8001fa0 <HAL_RCC_OscConfig+0x52c>
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	4b9a      	ldr	r3, [pc, #616]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	4a99      	ldr	r2, [pc, #612]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f90:	4b96      	ldr	r3, [pc, #600]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f96:	4a95      	ldr	r2, [pc, #596]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d016      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f858 	bl	800105c <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7ff f854 	bl	800105c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e162      	b.n	800228c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc6:	4b89      	ldr	r3, [pc, #548]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ed      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x53c>
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd6:	f7ff f841 	bl	800105c <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7ff f83d 	bl	800105c <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e14b      	b.n	800228c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff4:	4b7d      	ldr	r3, [pc, #500]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1ed      	bne.n	8001fde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002002:	7ffb      	ldrb	r3, [r7, #31]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d105      	bne.n	8002014 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002008:	4b78      	ldr	r3, [pc, #480]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	4a77      	ldr	r2, [pc, #476]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 800200e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002012:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b00      	cmp	r3, #0
 800201e:	d03c      	beq.n	800209a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01c      	beq.n	8002062 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002028:	4b70      	ldr	r3, [pc, #448]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 800202a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800202e:	4a6f      	ldr	r2, [pc, #444]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff f810 	bl	800105c <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002040:	f7ff f80c 	bl	800105c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e11c      	b.n	800228c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002052:	4b66      	ldr	r3, [pc, #408]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 8002054:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ef      	beq.n	8002040 <HAL_RCC_OscConfig+0x5cc>
 8002060:	e01b      	b.n	800209a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002062:	4b62      	ldr	r3, [pc, #392]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 8002064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002068:	4a60      	ldr	r2, [pc, #384]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7fe fff3 	bl	800105c <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800207a:	f7fe ffef 	bl	800105c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0ff      	b.n	800228c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800208c:	4b57      	ldr	r3, [pc, #348]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 800208e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1ef      	bne.n	800207a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80f3 	beq.w	800228a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	f040 80c9 	bne.w	8002240 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020ae:	4b4f      	ldr	r3, [pc, #316]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 0203 	and.w	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	429a      	cmp	r2, r3
 80020c0:	d12c      	bne.n	800211c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	3b01      	subs	r3, #1
 80020ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d123      	bne.n	800211c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d11b      	bne.n	800211c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d113      	bne.n	800211c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fe:	085b      	lsrs	r3, r3, #1
 8002100:	3b01      	subs	r3, #1
 8002102:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002104:	429a      	cmp	r2, r3
 8002106:	d109      	bne.n	800211c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	085b      	lsrs	r3, r3, #1
 8002114:	3b01      	subs	r3, #1
 8002116:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d06b      	beq.n	80021f4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d062      	beq.n	80021e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002122:	4b32      	ldr	r3, [pc, #200]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0ac      	b.n	800228c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002132:	4b2e      	ldr	r3, [pc, #184]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a2d      	ldr	r2, [pc, #180]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 8002138:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800213c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800213e:	f7fe ff8d 	bl	800105c <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002146:	f7fe ff89 	bl	800105c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e099      	b.n	800228c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002158:	4b24      	ldr	r3, [pc, #144]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f0      	bne.n	8002146 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002164:	4b21      	ldr	r3, [pc, #132]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <HAL_RCC_OscConfig+0x77c>)
 800216a:	4013      	ands	r3, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002174:	3a01      	subs	r2, #1
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	4311      	orrs	r1, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800217e:	0212      	lsls	r2, r2, #8
 8002180:	4311      	orrs	r1, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002186:	0852      	lsrs	r2, r2, #1
 8002188:	3a01      	subs	r2, #1
 800218a:	0552      	lsls	r2, r2, #21
 800218c:	4311      	orrs	r1, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002192:	0852      	lsrs	r2, r2, #1
 8002194:	3a01      	subs	r2, #1
 8002196:	0652      	lsls	r2, r2, #25
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800219e:	06d2      	lsls	r2, r2, #27
 80021a0:	430a      	orrs	r2, r1
 80021a2:	4912      	ldr	r1, [pc, #72]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0f      	ldr	r2, [pc, #60]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 80021ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021c0:	f7fe ff4c 	bl	800105c <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c8:	f7fe ff48 	bl	800105c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e058      	b.n	800228c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <HAL_RCC_OscConfig+0x778>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021e6:	e050      	b.n	800228a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e04f      	b.n	800228c <HAL_RCC_OscConfig+0x818>
 80021ec:	40021000 	.word	0x40021000
 80021f0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f4:	4b27      	ldr	r3, [pc, #156]	; (8002294 <HAL_RCC_OscConfig+0x820>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d144      	bne.n	800228a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002200:	4b24      	ldr	r3, [pc, #144]	; (8002294 <HAL_RCC_OscConfig+0x820>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a23      	ldr	r2, [pc, #140]	; (8002294 <HAL_RCC_OscConfig+0x820>)
 8002206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800220c:	4b21      	ldr	r3, [pc, #132]	; (8002294 <HAL_RCC_OscConfig+0x820>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a20      	ldr	r2, [pc, #128]	; (8002294 <HAL_RCC_OscConfig+0x820>)
 8002212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002216:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002218:	f7fe ff20 	bl	800105c <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe ff1c 	bl	800105c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e02c      	b.n	800228c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002232:	4b18      	ldr	r3, [pc, #96]	; (8002294 <HAL_RCC_OscConfig+0x820>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x7ac>
 800223e:	e024      	b.n	800228a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d01f      	beq.n	8002286 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002246:	4b13      	ldr	r3, [pc, #76]	; (8002294 <HAL_RCC_OscConfig+0x820>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a12      	ldr	r2, [pc, #72]	; (8002294 <HAL_RCC_OscConfig+0x820>)
 800224c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7fe ff03 	bl	800105c <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225a:	f7fe feff 	bl	800105c <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e00f      	b.n	800228c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_RCC_OscConfig+0x820>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_RCC_OscConfig+0x820>)
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	4905      	ldr	r1, [pc, #20]	; (8002294 <HAL_RCC_OscConfig+0x820>)
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_RCC_OscConfig+0x824>)
 8002280:	4013      	ands	r3, r2
 8002282:	60cb      	str	r3, [r1, #12]
 8002284:	e001      	b.n	800228a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	feeefffc 	.word	0xfeeefffc

0800229c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0e7      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b0:	4b75      	ldr	r3, [pc, #468]	; (8002488 <HAL_RCC_ClockConfig+0x1ec>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d910      	bls.n	80022e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b72      	ldr	r3, [pc, #456]	; (8002488 <HAL_RCC_ClockConfig+0x1ec>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0207 	bic.w	r2, r3, #7
 80022c6:	4970      	ldr	r1, [pc, #448]	; (8002488 <HAL_RCC_ClockConfig+0x1ec>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b6e      	ldr	r3, [pc, #440]	; (8002488 <HAL_RCC_ClockConfig+0x1ec>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0cf      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d010      	beq.n	800230e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	4b66      	ldr	r3, [pc, #408]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d908      	bls.n	800230e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fc:	4b63      	ldr	r3, [pc, #396]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4960      	ldr	r1, [pc, #384]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d04c      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002322:	4b5a      	ldr	r3, [pc, #360]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d121      	bne.n	8002372 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0a6      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d107      	bne.n	800234a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800233a:	4b54      	ldr	r3, [pc, #336]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d115      	bne.n	8002372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e09a      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d107      	bne.n	8002362 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002352:	4b4e      	ldr	r3, [pc, #312]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e08e      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002362:	4b4a      	ldr	r3, [pc, #296]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e086      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002372:	4b46      	ldr	r3, [pc, #280]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f023 0203 	bic.w	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4943      	ldr	r1, [pc, #268]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 8002380:	4313      	orrs	r3, r2
 8002382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002384:	f7fe fe6a 	bl	800105c <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800238c:	f7fe fe66 	bl	800105c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e06e      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	4b3a      	ldr	r3, [pc, #232]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 020c 	and.w	r2, r3, #12
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d1eb      	bne.n	800238c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d010      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d208      	bcs.n	80023e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b2e      	ldr	r3, [pc, #184]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	492b      	ldr	r1, [pc, #172]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e2:	4b29      	ldr	r3, [pc, #164]	; (8002488 <HAL_RCC_ClockConfig+0x1ec>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d210      	bcs.n	8002412 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f0:	4b25      	ldr	r3, [pc, #148]	; (8002488 <HAL_RCC_ClockConfig+0x1ec>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 0207 	bic.w	r2, r3, #7
 80023f8:	4923      	ldr	r1, [pc, #140]	; (8002488 <HAL_RCC_ClockConfig+0x1ec>)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002400:	4b21      	ldr	r3, [pc, #132]	; (8002488 <HAL_RCC_ClockConfig+0x1ec>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d001      	beq.n	8002412 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e036      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241e:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	4918      	ldr	r1, [pc, #96]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 800242c:	4313      	orrs	r3, r2
 800242e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d009      	beq.n	8002450 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4910      	ldr	r1, [pc, #64]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002450:	f000 f824 	bl	800249c <HAL_RCC_GetSysClockFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <HAL_RCC_ClockConfig+0x1f0>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	490b      	ldr	r1, [pc, #44]	; (8002490 <HAL_RCC_ClockConfig+0x1f4>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
 800246c:	4a09      	ldr	r2, [pc, #36]	; (8002494 <HAL_RCC_ClockConfig+0x1f8>)
 800246e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_RCC_ClockConfig+0x1fc>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe fda1 	bl	8000fbc <HAL_InitTick>
 800247a:	4603      	mov	r3, r0
 800247c:	72fb      	strb	r3, [r7, #11]

  return status;
 800247e:	7afb      	ldrb	r3, [r7, #11]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40022000 	.word	0x40022000
 800248c:	40021000 	.word	0x40021000
 8002490:	08004a20 	.word	0x08004a20
 8002494:	20000000 	.word	0x20000000
 8002498:	20000004 	.word	0x20000004

0800249c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	; 0x24
 80024a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024aa:	4b3e      	ldr	r3, [pc, #248]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b4:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x34>
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	2b0c      	cmp	r3, #12
 80024c8:	d121      	bne.n	800250e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d11e      	bne.n	800250e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024d0:	4b34      	ldr	r3, [pc, #208]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024dc:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	e005      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024ec:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024f8:	4a2b      	ldr	r2, [pc, #172]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002500:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10d      	bne.n	8002524 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d102      	bne.n	800251a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002514:	4b25      	ldr	r3, [pc, #148]	; (80025ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002516:	61bb      	str	r3, [r7, #24]
 8002518:	e004      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b08      	cmp	r3, #8
 800251e:	d101      	bne.n	8002524 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002520:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002522:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	2b0c      	cmp	r3, #12
 8002528:	d134      	bne.n	8002594 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800252a:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d003      	beq.n	8002542 <HAL_RCC_GetSysClockFreq+0xa6>
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d003      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0xac>
 8002540:	e005      	b.n	800254e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002542:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002544:	617b      	str	r3, [r7, #20]
      break;
 8002546:	e005      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800254a:	617b      	str	r3, [r7, #20]
      break;
 800254c:	e002      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	617b      	str	r3, [r7, #20]
      break;
 8002552:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	3301      	adds	r3, #1
 8002560:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	fb03 f202 	mul.w	r2, r3, r2
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	fbb2 f3f3 	udiv	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	0e5b      	lsrs	r3, r3, #25
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	3301      	adds	r3, #1
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002592:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002594:	69bb      	ldr	r3, [r7, #24]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3724      	adds	r7, #36	; 0x24
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	08004a38 	.word	0x08004a38
 80025ac:	00f42400 	.word	0x00f42400
 80025b0:	007a1200 	.word	0x007a1200

080025b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000000 	.word	0x20000000

080025cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025d0:	f7ff fff0 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4904      	ldr	r1, [pc, #16]	; (80025f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08004a30 	.word	0x08004a30

080025f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025fc:	f7ff ffda 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 8002600:	4602      	mov	r2, r0
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	0adb      	lsrs	r3, r3, #11
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	4904      	ldr	r1, [pc, #16]	; (8002620 <HAL_RCC_GetPCLK2Freq+0x28>)
 800260e:	5ccb      	ldrb	r3, [r1, r3]
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	08004a30 	.word	0x08004a30

08002624 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800262c:	2300      	movs	r3, #0
 800262e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800263c:	f7ff f9b6 	bl	80019ac <HAL_PWREx_GetVoltageRange>
 8002640:	6178      	str	r0, [r7, #20]
 8002642:	e014      	b.n	800266e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002644:	4b25      	ldr	r3, [pc, #148]	; (80026dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	4a24      	ldr	r2, [pc, #144]	; (80026dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800264a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264e:	6593      	str	r3, [r2, #88]	; 0x58
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800265c:	f7ff f9a6 	bl	80019ac <HAL_PWREx_GetVoltageRange>
 8002660:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002662:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002666:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800266c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002674:	d10b      	bne.n	800268e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b80      	cmp	r3, #128	; 0x80
 800267a:	d919      	bls.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2ba0      	cmp	r3, #160	; 0xa0
 8002680:	d902      	bls.n	8002688 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002682:	2302      	movs	r3, #2
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	e013      	b.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002688:	2301      	movs	r3, #1
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	e010      	b.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b80      	cmp	r3, #128	; 0x80
 8002692:	d902      	bls.n	800269a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002694:	2303      	movs	r3, #3
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	e00a      	b.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b80      	cmp	r3, #128	; 0x80
 800269e:	d102      	bne.n	80026a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026a0:	2302      	movs	r3, #2
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	e004      	b.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b70      	cmp	r3, #112	; 0x70
 80026aa:	d101      	bne.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026ac:	2301      	movs	r3, #1
 80026ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 0207 	bic.w	r2, r3, #7
 80026b8:	4909      	ldr	r1, [pc, #36]	; (80026e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026c0:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d001      	beq.n	80026d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40022000 	.word	0x40022000

080026e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026ec:	2300      	movs	r3, #0
 80026ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026f0:	2300      	movs	r3, #0
 80026f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d031      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002708:	d01a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800270a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800270e:	d814      	bhi.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002714:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002718:	d10f      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800271a:	4b5d      	ldr	r3, [pc, #372]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	4a5c      	ldr	r2, [pc, #368]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002726:	e00c      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f9de 	bl	8002af0 <RCCEx_PLLSAI1_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002738:	e003      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	74fb      	strb	r3, [r7, #19]
      break;
 800273e:	e000      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10b      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002748:	4b51      	ldr	r3, [pc, #324]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002756:	494e      	ldr	r1, [pc, #312]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800275e:	e001      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 809e 	beq.w	80028ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002776:	4b46      	ldr	r3, [pc, #280]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002786:	2300      	movs	r3, #0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00d      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278c:	4b40      	ldr	r3, [pc, #256]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	4a3f      	ldr	r2, [pc, #252]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002796:	6593      	str	r3, [r2, #88]	; 0x58
 8002798:	4b3d      	ldr	r3, [pc, #244]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a4:	2301      	movs	r3, #1
 80027a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027a8:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a39      	ldr	r2, [pc, #228]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027b4:	f7fe fc52 	bl	800105c <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027ba:	e009      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027bc:	f7fe fc4e 	bl	800105c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d902      	bls.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	74fb      	strb	r3, [r7, #19]
        break;
 80027ce:	e005      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027d0:	4b30      	ldr	r3, [pc, #192]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0ef      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d15a      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027e2:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01e      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d019      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027fe:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002808:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002810:	4a1f      	ldr	r2, [pc, #124]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002820:	4a1b      	ldr	r2, [pc, #108]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800282a:	4a19      	ldr	r2, [pc, #100]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d016      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe fc0e 	bl	800105c <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002842:	e00b      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002844:	f7fe fc0a 	bl	800105c <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d902      	bls.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	74fb      	strb	r3, [r7, #19]
            break;
 800285a:	e006      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0ec      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002870:	4b07      	ldr	r3, [pc, #28]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287e:	4904      	ldr	r1, [pc, #16]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002886:	e009      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	74bb      	strb	r3, [r7, #18]
 800288c:	e006      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800289c:	7c7b      	ldrb	r3, [r7, #17]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d105      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a2:	4b8a      	ldr	r3, [pc, #552]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	4a89      	ldr	r2, [pc, #548]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ba:	4b84      	ldr	r3, [pc, #528]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	f023 0203 	bic.w	r2, r3, #3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	4980      	ldr	r1, [pc, #512]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028dc:	4b7b      	ldr	r3, [pc, #492]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f023 020c 	bic.w	r2, r3, #12
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	4978      	ldr	r1, [pc, #480]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028fe:	4b73      	ldr	r3, [pc, #460]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002904:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	496f      	ldr	r1, [pc, #444]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002920:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292e:	4967      	ldr	r1, [pc, #412]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002942:	4b62      	ldr	r3, [pc, #392]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002948:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	495e      	ldr	r1, [pc, #376]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002964:	4b59      	ldr	r3, [pc, #356]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	4956      	ldr	r1, [pc, #344]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002986:	4b51      	ldr	r3, [pc, #324]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	494d      	ldr	r1, [pc, #308]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d028      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029a8:	4b48      	ldr	r3, [pc, #288]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4945      	ldr	r1, [pc, #276]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c6:	d106      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c8:	4b40      	ldr	r3, [pc, #256]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a3f      	ldr	r2, [pc, #252]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029d2:	60d3      	str	r3, [r2, #12]
 80029d4:	e011      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029de:	d10c      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3304      	adds	r3, #4
 80029e4:	2101      	movs	r1, #1
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f882 	bl	8002af0 <RCCEx_PLLSAI1_Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80029f6:	7cfb      	ldrb	r3, [r7, #19]
 80029f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d028      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a06:	4b31      	ldr	r3, [pc, #196]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	492d      	ldr	r1, [pc, #180]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a24:	d106      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a26:	4b29      	ldr	r3, [pc, #164]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	4a28      	ldr	r2, [pc, #160]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a30:	60d3      	str	r3, [r2, #12]
 8002a32:	e011      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	2101      	movs	r1, #1
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 f853 	bl	8002af0 <RCCEx_PLLSAI1_Config>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a4e:	7cfb      	ldrb	r3, [r7, #19]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01c      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a72:	4916      	ldr	r1, [pc, #88]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a82:	d10c      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3304      	adds	r3, #4
 8002a88:	2102      	movs	r1, #2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f830 	bl	8002af0 <RCCEx_PLLSAI1_Config>
 8002a90:	4603      	mov	r3, r0
 8002a92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a94:	7cfb      	ldrb	r3, [r7, #19]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002a9a:	7cfb      	ldrb	r3, [r7, #19]
 8002a9c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab8:	4904      	ldr	r1, [pc, #16]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ac0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000

08002ad0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ada:	f043 0304 	orr.w	r3, r3, #4
 8002ade:	6013      	str	r3, [r2, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000

08002af0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002afe:	4b74      	ldr	r3, [pc, #464]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d018      	beq.n	8002b3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b0a:	4b71      	ldr	r3, [pc, #452]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0203 	and.w	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d10d      	bne.n	8002b36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b22:	4b6b      	ldr	r3, [pc, #428]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
       ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d047      	beq.n	8002bc6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
 8002b3a:	e044      	b.n	8002bc6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d018      	beq.n	8002b76 <RCCEx_PLLSAI1_Config+0x86>
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d825      	bhi.n	8002b94 <RCCEx_PLLSAI1_Config+0xa4>
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d002      	beq.n	8002b52 <RCCEx_PLLSAI1_Config+0x62>
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d009      	beq.n	8002b64 <RCCEx_PLLSAI1_Config+0x74>
 8002b50:	e020      	b.n	8002b94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b52:	4b5f      	ldr	r3, [pc, #380]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d11d      	bne.n	8002b9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b62:	e01a      	b.n	8002b9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b64:	4b5a      	ldr	r3, [pc, #360]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d116      	bne.n	8002b9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b74:	e013      	b.n	8002b9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b76:	4b56      	ldr	r3, [pc, #344]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10f      	bne.n	8002ba2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b82:	4b53      	ldr	r3, [pc, #332]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b92:	e006      	b.n	8002ba2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
      break;
 8002b98:	e004      	b.n	8002ba4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e002      	b.n	8002ba4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e000      	b.n	8002ba4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ba2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10d      	bne.n	8002bc6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002baa:	4b49      	ldr	r3, [pc, #292]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6819      	ldr	r1, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	4943      	ldr	r1, [pc, #268]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d17c      	bne.n	8002cc6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bcc:	4b40      	ldr	r3, [pc, #256]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a3f      	ldr	r2, [pc, #252]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd8:	f7fe fa40 	bl	800105c <HAL_GetTick>
 8002bdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bde:	e009      	b.n	8002bf4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002be0:	f7fe fa3c 	bl	800105c <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d902      	bls.n	8002bf4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	73fb      	strb	r3, [r7, #15]
        break;
 8002bf2:	e005      	b.n	8002c00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bf4:	4b36      	ldr	r3, [pc, #216]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1ef      	bne.n	8002be0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d15f      	bne.n	8002cc6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d110      	bne.n	8002c2e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c0c:	4b30      	ldr	r3, [pc, #192]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002c14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6892      	ldr	r2, [r2, #8]
 8002c1c:	0211      	lsls	r1, r2, #8
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68d2      	ldr	r2, [r2, #12]
 8002c22:	06d2      	lsls	r2, r2, #27
 8002c24:	430a      	orrs	r2, r1
 8002c26:	492a      	ldr	r1, [pc, #168]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	610b      	str	r3, [r1, #16]
 8002c2c:	e027      	b.n	8002c7e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d112      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c34:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6892      	ldr	r2, [r2, #8]
 8002c44:	0211      	lsls	r1, r2, #8
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6912      	ldr	r2, [r2, #16]
 8002c4a:	0852      	lsrs	r2, r2, #1
 8002c4c:	3a01      	subs	r2, #1
 8002c4e:	0552      	lsls	r2, r2, #21
 8002c50:	430a      	orrs	r2, r1
 8002c52:	491f      	ldr	r1, [pc, #124]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	610b      	str	r3, [r1, #16]
 8002c58:	e011      	b.n	8002c7e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6892      	ldr	r2, [r2, #8]
 8002c6a:	0211      	lsls	r1, r2, #8
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6952      	ldr	r2, [r2, #20]
 8002c70:	0852      	lsrs	r2, r2, #1
 8002c72:	3a01      	subs	r2, #1
 8002c74:	0652      	lsls	r2, r2, #25
 8002c76:	430a      	orrs	r2, r1
 8002c78:	4915      	ldr	r1, [pc, #84]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c7e:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a13      	ldr	r2, [pc, #76]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8a:	f7fe f9e7 	bl	800105c <HAL_GetTick>
 8002c8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c90:	e009      	b.n	8002ca6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c92:	f7fe f9e3 	bl	800105c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d902      	bls.n	8002ca6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	73fb      	strb	r3, [r7, #15]
          break;
 8002ca4:	e005      	b.n	8002cb2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0ef      	beq.n	8002c92 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d106      	bne.n	8002cc6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	4903      	ldr	r1, [pc, #12]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000

08002cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e049      	b.n	8002d7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fd fd98 	bl	8000830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f000 fd5a 	bl	80037cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e049      	b.n	8002e28 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d106      	bne.n	8002dae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f841 	bl	8002e30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	f000 fd03 	bl	80037cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d109      	bne.n	8002e70 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e03c      	b.n	8002eea <HAL_TIM_PWM_Start_DMA+0xa6>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d109      	bne.n	8002e8a <HAL_TIM_PWM_Start_DMA+0x46>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	bf0c      	ite	eq
 8002e82:	2301      	moveq	r3, #1
 8002e84:	2300      	movne	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	e02f      	b.n	8002eea <HAL_TIM_PWM_Start_DMA+0xa6>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d109      	bne.n	8002ea4 <HAL_TIM_PWM_Start_DMA+0x60>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	e022      	b.n	8002eea <HAL_TIM_PWM_Start_DMA+0xa6>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d109      	bne.n	8002ebe <HAL_TIM_PWM_Start_DMA+0x7a>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	bf0c      	ite	eq
 8002eb6:	2301      	moveq	r3, #1
 8002eb8:	2300      	movne	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	e015      	b.n	8002eea <HAL_TIM_PWM_Start_DMA+0xa6>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d109      	bne.n	8002ed8 <HAL_TIM_PWM_Start_DMA+0x94>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	bf0c      	ite	eq
 8002ed0:	2301      	moveq	r3, #1
 8002ed2:	2300      	movne	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e008      	b.n	8002eea <HAL_TIM_PWM_Start_DMA+0xa6>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e18d      	b.n	800320e <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <HAL_TIM_PWM_Start_DMA+0xc8>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e03c      	b.n	8002f86 <HAL_TIM_PWM_Start_DMA+0x142>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d109      	bne.n	8002f26 <HAL_TIM_PWM_Start_DMA+0xe2>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	bf0c      	ite	eq
 8002f1e:	2301      	moveq	r3, #1
 8002f20:	2300      	movne	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	e02f      	b.n	8002f86 <HAL_TIM_PWM_Start_DMA+0x142>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d109      	bne.n	8002f40 <HAL_TIM_PWM_Start_DMA+0xfc>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	bf0c      	ite	eq
 8002f38:	2301      	moveq	r3, #1
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e022      	b.n	8002f86 <HAL_TIM_PWM_Start_DMA+0x142>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d109      	bne.n	8002f5a <HAL_TIM_PWM_Start_DMA+0x116>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	bf0c      	ite	eq
 8002f52:	2301      	moveq	r3, #1
 8002f54:	2300      	movne	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	e015      	b.n	8002f86 <HAL_TIM_PWM_Start_DMA+0x142>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b10      	cmp	r3, #16
 8002f5e:	d109      	bne.n	8002f74 <HAL_TIM_PWM_Start_DMA+0x130>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e008      	b.n	8002f86 <HAL_TIM_PWM_Start_DMA+0x142>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d034      	beq.n	8002ff4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_TIM_PWM_Start_DMA+0x152>
 8002f90:	887b      	ldrh	r3, [r7, #2]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e139      	b.n	800320e <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d104      	bne.n	8002faa <HAL_TIM_PWM_Start_DMA+0x166>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fa8:	e026      	b.n	8002ff8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d104      	bne.n	8002fba <HAL_TIM_PWM_Start_DMA+0x176>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fb8:	e01e      	b.n	8002ff8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d104      	bne.n	8002fca <HAL_TIM_PWM_Start_DMA+0x186>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fc8:	e016      	b.n	8002ff8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	d104      	bne.n	8002fda <HAL_TIM_PWM_Start_DMA+0x196>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fd8:	e00e      	b.n	8002ff8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d104      	bne.n	8002fea <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fe8:	e006      	b.n	8002ff8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ff2:	e001      	b.n	8002ff8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e10a      	b.n	800320e <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	f200 80ae 	bhi.w	800315c <HAL_TIM_PWM_Start_DMA+0x318>
 8003000:	a201      	add	r2, pc, #4	; (adr r2, 8003008 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003006:	bf00      	nop
 8003008:	0800303d 	.word	0x0800303d
 800300c:	0800315d 	.word	0x0800315d
 8003010:	0800315d 	.word	0x0800315d
 8003014:	0800315d 	.word	0x0800315d
 8003018:	08003085 	.word	0x08003085
 800301c:	0800315d 	.word	0x0800315d
 8003020:	0800315d 	.word	0x0800315d
 8003024:	0800315d 	.word	0x0800315d
 8003028:	080030cd 	.word	0x080030cd
 800302c:	0800315d 	.word	0x0800315d
 8003030:	0800315d 	.word	0x0800315d
 8003034:	0800315d 	.word	0x0800315d
 8003038:	08003115 	.word	0x08003115
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	4a75      	ldr	r2, [pc, #468]	; (8003218 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8003042:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	4a74      	ldr	r2, [pc, #464]	; (800321c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800304a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	4a73      	ldr	r2, [pc, #460]	; (8003220 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003052:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3334      	adds	r3, #52	; 0x34
 8003060:	461a      	mov	r2, r3
 8003062:	887b      	ldrh	r3, [r7, #2]
 8003064:	f7fe f9d0 	bl	8001408 <HAL_DMA_Start_IT>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e0cd      	b.n	800320e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003080:	60da      	str	r2, [r3, #12]
      break;
 8003082:	e06e      	b.n	8003162 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	4a63      	ldr	r2, [pc, #396]	; (8003218 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800308a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	4a62      	ldr	r2, [pc, #392]	; (800321c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8003092:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	4a61      	ldr	r2, [pc, #388]	; (8003220 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800309a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3338      	adds	r3, #56	; 0x38
 80030a8:	461a      	mov	r2, r3
 80030aa:	887b      	ldrh	r3, [r7, #2]
 80030ac:	f7fe f9ac 	bl	8001408 <HAL_DMA_Start_IT>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e0a9      	b.n	800320e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030c8:	60da      	str	r2, [r3, #12]
      break;
 80030ca:	e04a      	b.n	8003162 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	4a51      	ldr	r2, [pc, #324]	; (8003218 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80030d2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	4a50      	ldr	r2, [pc, #320]	; (800321c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80030da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	4a4f      	ldr	r2, [pc, #316]	; (8003220 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80030e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	333c      	adds	r3, #60	; 0x3c
 80030f0:	461a      	mov	r2, r3
 80030f2:	887b      	ldrh	r3, [r7, #2]
 80030f4:	f7fe f988 	bl	8001408 <HAL_DMA_Start_IT>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e085      	b.n	800320e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003110:	60da      	str	r2, [r3, #12]
      break;
 8003112:	e026      	b.n	8003162 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	4a3f      	ldr	r2, [pc, #252]	; (8003218 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	4a3e      	ldr	r2, [pc, #248]	; (800321c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8003122:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	4a3d      	ldr	r2, [pc, #244]	; (8003220 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800312a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3340      	adds	r3, #64	; 0x40
 8003138:	461a      	mov	r2, r3
 800313a:	887b      	ldrh	r3, [r7, #2]
 800313c:	f7fe f964 	bl	8001408 <HAL_DMA_Start_IT>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e061      	b.n	800320e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003158:	60da      	str	r2, [r3, #12]
      break;
 800315a:	e002      	b.n	8003162 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	75fb      	strb	r3, [r7, #23]
      break;
 8003160:	bf00      	nop
  }

  if (status == HAL_OK)
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d151      	bne.n	800320c <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2201      	movs	r2, #1
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fea7 	bl	8003ec4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2a      	ldr	r2, [pc, #168]	; (8003224 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_TIM_PWM_Start_DMA+0x350>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a28      	ldr	r2, [pc, #160]	; (8003228 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_TIM_PWM_Start_DMA+0x350>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a27      	ldr	r2, [pc, #156]	; (800322c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d101      	bne.n	8003198 <HAL_TIM_PWM_Start_DMA+0x354>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_TIM_PWM_Start_DMA+0x356>
 8003198:	2300      	movs	r3, #0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d007      	beq.n	80031ae <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1c      	ldr	r2, [pc, #112]	; (8003224 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d009      	beq.n	80031cc <HAL_TIM_PWM_Start_DMA+0x388>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c0:	d004      	beq.n	80031cc <HAL_TIM_PWM_Start_DMA+0x388>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a18      	ldr	r2, [pc, #96]	; (8003228 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d115      	bne.n	80031f8 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	4b17      	ldr	r3, [pc, #92]	; (8003230 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	2b06      	cmp	r3, #6
 80031dc:	d015      	beq.n	800320a <HAL_TIM_PWM_Start_DMA+0x3c6>
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e4:	d011      	beq.n	800320a <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f6:	e008      	b.n	800320a <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	e000      	b.n	800320c <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800320c:	7dfb      	ldrb	r3, [r7, #23]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	080036bd 	.word	0x080036bd
 800321c:	08003765 	.word	0x08003765
 8003220:	0800362b 	.word	0x0800362b
 8003224:	40012c00 	.word	0x40012c00
 8003228:	40014000 	.word	0x40014000
 800322c:	40014400 	.word	0x40014400
 8003230:	00010007 	.word	0x00010007

08003234 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800324e:	2302      	movs	r3, #2
 8003250:	e0ff      	b.n	8003452 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b14      	cmp	r3, #20
 800325e:	f200 80f0 	bhi.w	8003442 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003262:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	080032bd 	.word	0x080032bd
 800326c:	08003443 	.word	0x08003443
 8003270:	08003443 	.word	0x08003443
 8003274:	08003443 	.word	0x08003443
 8003278:	080032fd 	.word	0x080032fd
 800327c:	08003443 	.word	0x08003443
 8003280:	08003443 	.word	0x08003443
 8003284:	08003443 	.word	0x08003443
 8003288:	0800333f 	.word	0x0800333f
 800328c:	08003443 	.word	0x08003443
 8003290:	08003443 	.word	0x08003443
 8003294:	08003443 	.word	0x08003443
 8003298:	0800337f 	.word	0x0800337f
 800329c:	08003443 	.word	0x08003443
 80032a0:	08003443 	.word	0x08003443
 80032a4:	08003443 	.word	0x08003443
 80032a8:	080033c1 	.word	0x080033c1
 80032ac:	08003443 	.word	0x08003443
 80032b0:	08003443 	.word	0x08003443
 80032b4:	08003443 	.word	0x08003443
 80032b8:	08003401 	.word	0x08003401
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fae6 	bl	8003894 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0208 	orr.w	r2, r2, #8
 80032d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0204 	bic.w	r2, r2, #4
 80032e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6999      	ldr	r1, [r3, #24]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	619a      	str	r2, [r3, #24]
      break;
 80032fa:	e0a5      	b.n	8003448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fb42 	bl	800398c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6999      	ldr	r1, [r3, #24]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	021a      	lsls	r2, r3, #8
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	619a      	str	r2, [r3, #24]
      break;
 800333c:	e084      	b.n	8003448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fb9b 	bl	8003a80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 0208 	orr.w	r2, r2, #8
 8003358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0204 	bic.w	r2, r2, #4
 8003368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69d9      	ldr	r1, [r3, #28]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	61da      	str	r2, [r3, #28]
      break;
 800337c:	e064      	b.n	8003448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fbf3 	bl	8003b70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69da      	ldr	r2, [r3, #28]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69d9      	ldr	r1, [r3, #28]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	021a      	lsls	r2, r3, #8
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	61da      	str	r2, [r3, #28]
      break;
 80033be:	e043      	b.n	8003448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fc30 	bl	8003c2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0208 	orr.w	r2, r2, #8
 80033da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0204 	bic.w	r2, r2, #4
 80033ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033fe:	e023      	b.n	8003448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fc68 	bl	8003cdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800341a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800342a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	021a      	lsls	r2, r3, #8
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003440:	e002      	b.n	8003448 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	75fb      	strb	r3, [r7, #23]
      break;
 8003446:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003450:	7dfb      	ldrb	r3, [r7, #23]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop

0800345c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_TIM_ConfigClockSource+0x1c>
 8003474:	2302      	movs	r3, #2
 8003476:	e0b6      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x18a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003496:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800349a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b4:	d03e      	beq.n	8003534 <HAL_TIM_ConfigClockSource+0xd8>
 80034b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ba:	f200 8087 	bhi.w	80035cc <HAL_TIM_ConfigClockSource+0x170>
 80034be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c2:	f000 8086 	beq.w	80035d2 <HAL_TIM_ConfigClockSource+0x176>
 80034c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ca:	d87f      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x170>
 80034cc:	2b70      	cmp	r3, #112	; 0x70
 80034ce:	d01a      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0xaa>
 80034d0:	2b70      	cmp	r3, #112	; 0x70
 80034d2:	d87b      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x170>
 80034d4:	2b60      	cmp	r3, #96	; 0x60
 80034d6:	d050      	beq.n	800357a <HAL_TIM_ConfigClockSource+0x11e>
 80034d8:	2b60      	cmp	r3, #96	; 0x60
 80034da:	d877      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x170>
 80034dc:	2b50      	cmp	r3, #80	; 0x50
 80034de:	d03c      	beq.n	800355a <HAL_TIM_ConfigClockSource+0xfe>
 80034e0:	2b50      	cmp	r3, #80	; 0x50
 80034e2:	d873      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x170>
 80034e4:	2b40      	cmp	r3, #64	; 0x40
 80034e6:	d058      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x13e>
 80034e8:	2b40      	cmp	r3, #64	; 0x40
 80034ea:	d86f      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x170>
 80034ec:	2b30      	cmp	r3, #48	; 0x30
 80034ee:	d064      	beq.n	80035ba <HAL_TIM_ConfigClockSource+0x15e>
 80034f0:	2b30      	cmp	r3, #48	; 0x30
 80034f2:	d86b      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x170>
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d060      	beq.n	80035ba <HAL_TIM_ConfigClockSource+0x15e>
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d867      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x170>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d05c      	beq.n	80035ba <HAL_TIM_ConfigClockSource+0x15e>
 8003500:	2b10      	cmp	r3, #16
 8003502:	d05a      	beq.n	80035ba <HAL_TIM_ConfigClockSource+0x15e>
 8003504:	e062      	b.n	80035cc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6899      	ldr	r1, [r3, #8]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f000 fcb5 	bl	8003e84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003528:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	609a      	str	r2, [r3, #8]
      break;
 8003532:	e04f      	b.n	80035d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	6899      	ldr	r1, [r3, #8]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f000 fc9e 	bl	8003e84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003556:	609a      	str	r2, [r3, #8]
      break;
 8003558:	e03c      	b.n	80035d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6859      	ldr	r1, [r3, #4]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	461a      	mov	r2, r3
 8003568:	f000 fc12 	bl	8003d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2150      	movs	r1, #80	; 0x50
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fc6b 	bl	8003e4e <TIM_ITRx_SetConfig>
      break;
 8003578:	e02c      	b.n	80035d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6859      	ldr	r1, [r3, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	461a      	mov	r2, r3
 8003588:	f000 fc31 	bl	8003dee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2160      	movs	r1, #96	; 0x60
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fc5b 	bl	8003e4e <TIM_ITRx_SetConfig>
      break;
 8003598:	e01c      	b.n	80035d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	461a      	mov	r2, r3
 80035a8:	f000 fbf2 	bl	8003d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2140      	movs	r1, #64	; 0x40
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fc4b 	bl	8003e4e <TIM_ITRx_SetConfig>
      break;
 80035b8:	e00c      	b.n	80035d4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4619      	mov	r1, r3
 80035c4:	4610      	mov	r0, r2
 80035c6:	f000 fc42 	bl	8003e4e <TIM_ITRx_SetConfig>
      break;
 80035ca:	e003      	b.n	80035d4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
      break;
 80035d0:	e000      	b.n	80035d4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80035d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	429a      	cmp	r2, r3
 8003640:	d107      	bne.n	8003652 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003650:	e02a      	b.n	80036a8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d107      	bne.n	800366c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2202      	movs	r2, #2
 8003660:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800366a:	e01d      	b.n	80036a8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	429a      	cmp	r2, r3
 8003674:	d107      	bne.n	8003686 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2204      	movs	r2, #4
 800367a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003684:	e010      	b.n	80036a8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	429a      	cmp	r2, r3
 800368e:	d107      	bne.n	80036a0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2208      	movs	r2, #8
 8003694:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800369e:	e003      	b.n	80036a8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7ff ffb4 	bl	8003616 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
}
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d10b      	bne.n	80036ec <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d136      	bne.n	8003750 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036ea:	e031      	b.n	8003750 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d10b      	bne.n	800370e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2202      	movs	r2, #2
 80036fa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d125      	bne.n	8003750 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800370c:	e020      	b.n	8003750 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	429a      	cmp	r2, r3
 8003716:	d10b      	bne.n	8003730 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2204      	movs	r2, #4
 800371c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d114      	bne.n	8003750 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800372e:	e00f      	b.n	8003750 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	429a      	cmp	r2, r3
 8003738:	d10a      	bne.n	8003750 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2208      	movs	r2, #8
 800373e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d103      	bne.n	8003750 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f7ff ff4c 	bl	80035ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	429a      	cmp	r2, r3
 800377a:	d103      	bne.n	8003784 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	771a      	strb	r2, [r3, #28]
 8003782:	e019      	b.n	80037b8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	429a      	cmp	r2, r3
 800378c:	d103      	bne.n	8003796 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2202      	movs	r2, #2
 8003792:	771a      	strb	r2, [r3, #28]
 8003794:	e010      	b.n	80037b8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	429a      	cmp	r2, r3
 800379e:	d103      	bne.n	80037a8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2204      	movs	r2, #4
 80037a4:	771a      	strb	r2, [r3, #28]
 80037a6:	e007      	b.n	80037b8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d102      	bne.n	80037b8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2208      	movs	r2, #8
 80037b6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f7ff ff22 	bl	8003602 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a2a      	ldr	r2, [pc, #168]	; (8003888 <TIM_Base_SetConfig+0xbc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d003      	beq.n	80037ec <TIM_Base_SetConfig+0x20>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ea:	d108      	bne.n	80037fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a21      	ldr	r2, [pc, #132]	; (8003888 <TIM_Base_SetConfig+0xbc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00b      	beq.n	800381e <TIM_Base_SetConfig+0x52>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380c:	d007      	beq.n	800381e <TIM_Base_SetConfig+0x52>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a1e      	ldr	r2, [pc, #120]	; (800388c <TIM_Base_SetConfig+0xc0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d003      	beq.n	800381e <TIM_Base_SetConfig+0x52>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a1d      	ldr	r2, [pc, #116]	; (8003890 <TIM_Base_SetConfig+0xc4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d108      	bne.n	8003830 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a0c      	ldr	r2, [pc, #48]	; (8003888 <TIM_Base_SetConfig+0xbc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d007      	beq.n	800386c <TIM_Base_SetConfig+0xa0>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a0b      	ldr	r2, [pc, #44]	; (800388c <TIM_Base_SetConfig+0xc0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d003      	beq.n	800386c <TIM_Base_SetConfig+0xa0>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <TIM_Base_SetConfig+0xc4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d103      	bne.n	8003874 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	615a      	str	r2, [r3, #20]
}
 800387a:	bf00      	nop
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40012c00 	.word	0x40012c00
 800388c:	40014000 	.word	0x40014000
 8003890:	40014400 	.word	0x40014400

08003894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f023 0201 	bic.w	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0303 	bic.w	r3, r3, #3
 80038ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f023 0302 	bic.w	r3, r3, #2
 80038e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a24      	ldr	r2, [pc, #144]	; (8003980 <TIM_OC1_SetConfig+0xec>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d007      	beq.n	8003904 <TIM_OC1_SetConfig+0x70>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a23      	ldr	r2, [pc, #140]	; (8003984 <TIM_OC1_SetConfig+0xf0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d003      	beq.n	8003904 <TIM_OC1_SetConfig+0x70>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a22      	ldr	r2, [pc, #136]	; (8003988 <TIM_OC1_SetConfig+0xf4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d10c      	bne.n	800391e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f023 0308 	bic.w	r3, r3, #8
 800390a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f023 0304 	bic.w	r3, r3, #4
 800391c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a17      	ldr	r2, [pc, #92]	; (8003980 <TIM_OC1_SetConfig+0xec>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d007      	beq.n	8003936 <TIM_OC1_SetConfig+0xa2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a16      	ldr	r2, [pc, #88]	; (8003984 <TIM_OC1_SetConfig+0xf0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d003      	beq.n	8003936 <TIM_OC1_SetConfig+0xa2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a15      	ldr	r2, [pc, #84]	; (8003988 <TIM_OC1_SetConfig+0xf4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d111      	bne.n	800395a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800393c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	621a      	str	r2, [r3, #32]
}
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	40012c00 	.word	0x40012c00
 8003984:	40014000 	.word	0x40014000
 8003988:	40014400 	.word	0x40014400

0800398c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	f023 0210 	bic.w	r2, r3, #16
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f023 0320 	bic.w	r3, r3, #32
 80039da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a22      	ldr	r2, [pc, #136]	; (8003a74 <TIM_OC2_SetConfig+0xe8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d10d      	bne.n	8003a0c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <TIM_OC2_SetConfig+0xe8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d007      	beq.n	8003a24 <TIM_OC2_SetConfig+0x98>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a18      	ldr	r2, [pc, #96]	; (8003a78 <TIM_OC2_SetConfig+0xec>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_OC2_SetConfig+0x98>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <TIM_OC2_SetConfig+0xf0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d113      	bne.n	8003a4c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	621a      	str	r2, [r3, #32]
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	40014000 	.word	0x40014000
 8003a7c:	40014400 	.word	0x40014400

08003a80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0303 	bic.w	r3, r3, #3
 8003aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	021b      	lsls	r3, r3, #8
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <TIM_OC3_SetConfig+0xe4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d10d      	bne.n	8003afe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a18      	ldr	r2, [pc, #96]	; (8003b64 <TIM_OC3_SetConfig+0xe4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d007      	beq.n	8003b16 <TIM_OC3_SetConfig+0x96>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <TIM_OC3_SetConfig+0xe8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_OC3_SetConfig+0x96>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <TIM_OC3_SetConfig+0xec>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d113      	bne.n	8003b3e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	621a      	str	r2, [r3, #32]
}
 8003b58:	bf00      	nop
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	40012c00 	.word	0x40012c00
 8003b68:	40014000 	.word	0x40014000
 8003b6c:	40014400 	.word	0x40014400

08003b70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	031b      	lsls	r3, r3, #12
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a14      	ldr	r2, [pc, #80]	; (8003c20 <TIM_OC4_SetConfig+0xb0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d007      	beq.n	8003be4 <TIM_OC4_SetConfig+0x74>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <TIM_OC4_SetConfig+0xb4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d003      	beq.n	8003be4 <TIM_OC4_SetConfig+0x74>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a12      	ldr	r2, [pc, #72]	; (8003c28 <TIM_OC4_SetConfig+0xb8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d109      	bne.n	8003bf8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	019b      	lsls	r3, r3, #6
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	621a      	str	r2, [r3, #32]
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40014000 	.word	0x40014000
 8003c28:	40014400 	.word	0x40014400

08003c2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	041b      	lsls	r3, r3, #16
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <TIM_OC5_SetConfig+0xa4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d007      	beq.n	8003c96 <TIM_OC5_SetConfig+0x6a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a12      	ldr	r2, [pc, #72]	; (8003cd4 <TIM_OC5_SetConfig+0xa8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <TIM_OC5_SetConfig+0x6a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a11      	ldr	r2, [pc, #68]	; (8003cd8 <TIM_OC5_SetConfig+0xac>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d109      	bne.n	8003caa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	621a      	str	r2, [r3, #32]
}
 8003cc4:	bf00      	nop
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	40012c00 	.word	0x40012c00
 8003cd4:	40014000 	.word	0x40014000
 8003cd8:	40014400 	.word	0x40014400

08003cdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	051b      	lsls	r3, r3, #20
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a14      	ldr	r2, [pc, #80]	; (8003d84 <TIM_OC6_SetConfig+0xa8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d007      	beq.n	8003d48 <TIM_OC6_SetConfig+0x6c>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <TIM_OC6_SetConfig+0xac>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <TIM_OC6_SetConfig+0x6c>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <TIM_OC6_SetConfig+0xb0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d109      	bne.n	8003d5c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	029b      	lsls	r3, r3, #10
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	621a      	str	r2, [r3, #32]
}
 8003d76:	bf00      	nop
 8003d78:	371c      	adds	r7, #28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40012c00 	.word	0x40012c00
 8003d88:	40014000 	.word	0x40014000
 8003d8c:	40014400 	.word	0x40014400

08003d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f023 0201 	bic.w	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f023 030a 	bic.w	r3, r3, #10
 8003dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	621a      	str	r2, [r3, #32]
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b087      	sub	sp, #28
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f023 0210 	bic.w	r2, r3, #16
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	031b      	lsls	r3, r3, #12
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f043 0307 	orr.w	r3, r3, #7
 8003e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	609a      	str	r2, [r3, #8]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	021a      	lsls	r2, r3, #8
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	609a      	str	r2, [r3, #8]
}
 8003eb8:	bf00      	nop
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a1a      	ldr	r2, [r3, #32]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a1a      	ldr	r2, [r3, #32]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f003 031f 	and.w	r3, r3, #31
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8003efc:	431a      	orrs	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	621a      	str	r2, [r3, #32]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
	...

08003f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e04f      	b.n	8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d108      	bne.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d009      	beq.n	8003f9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f90:	d004      	beq.n	8003f9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a10      	ldr	r2, [pc, #64]	; (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d10c      	bne.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	40014000 	.word	0x40014000

08003fdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e040      	b.n	8004070 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fc fc94 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2224      	movs	r2, #36	; 0x24
 8004008:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f82c 	bl	8004078 <UART_SetConfig>
 8004020:	4603      	mov	r3, r0
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e022      	b.n	8004070 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fa4c 	bl	80044d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004046:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004056:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fad3 	bl	8004614 <UART_CheckIdleState>
 800406e:	4603      	mov	r3, r0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800407c:	b08a      	sub	sp, #40	; 0x28
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	431a      	orrs	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	431a      	orrs	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	4313      	orrs	r3, r2
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4bb4      	ldr	r3, [pc, #720]	; (8004378 <UART_SetConfig+0x300>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4aa9      	ldr	r2, [pc, #676]	; (800437c <UART_SetConfig+0x304>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e0:	4313      	orrs	r3, r2
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f4:	430a      	orrs	r2, r1
 80040f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4aa0      	ldr	r2, [pc, #640]	; (8004380 <UART_SetConfig+0x308>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d126      	bne.n	8004150 <UART_SetConfig+0xd8>
 8004102:	4ba0      	ldr	r3, [pc, #640]	; (8004384 <UART_SetConfig+0x30c>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	2b03      	cmp	r3, #3
 800410e:	d81b      	bhi.n	8004148 <UART_SetConfig+0xd0>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <UART_SetConfig+0xa0>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	08004129 	.word	0x08004129
 800411c:	08004139 	.word	0x08004139
 8004120:	08004131 	.word	0x08004131
 8004124:	08004141 	.word	0x08004141
 8004128:	2301      	movs	r3, #1
 800412a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800412e:	e080      	b.n	8004232 <UART_SetConfig+0x1ba>
 8004130:	2302      	movs	r3, #2
 8004132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004136:	e07c      	b.n	8004232 <UART_SetConfig+0x1ba>
 8004138:	2304      	movs	r3, #4
 800413a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800413e:	e078      	b.n	8004232 <UART_SetConfig+0x1ba>
 8004140:	2308      	movs	r3, #8
 8004142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004146:	e074      	b.n	8004232 <UART_SetConfig+0x1ba>
 8004148:	2310      	movs	r3, #16
 800414a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800414e:	e070      	b.n	8004232 <UART_SetConfig+0x1ba>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a8c      	ldr	r2, [pc, #560]	; (8004388 <UART_SetConfig+0x310>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d138      	bne.n	80041cc <UART_SetConfig+0x154>
 800415a:	4b8a      	ldr	r3, [pc, #552]	; (8004384 <UART_SetConfig+0x30c>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b0c      	cmp	r3, #12
 8004166:	d82d      	bhi.n	80041c4 <UART_SetConfig+0x14c>
 8004168:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <UART_SetConfig+0xf8>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	080041a5 	.word	0x080041a5
 8004174:	080041c5 	.word	0x080041c5
 8004178:	080041c5 	.word	0x080041c5
 800417c:	080041c5 	.word	0x080041c5
 8004180:	080041b5 	.word	0x080041b5
 8004184:	080041c5 	.word	0x080041c5
 8004188:	080041c5 	.word	0x080041c5
 800418c:	080041c5 	.word	0x080041c5
 8004190:	080041ad 	.word	0x080041ad
 8004194:	080041c5 	.word	0x080041c5
 8004198:	080041c5 	.word	0x080041c5
 800419c:	080041c5 	.word	0x080041c5
 80041a0:	080041bd 	.word	0x080041bd
 80041a4:	2300      	movs	r3, #0
 80041a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041aa:	e042      	b.n	8004232 <UART_SetConfig+0x1ba>
 80041ac:	2302      	movs	r3, #2
 80041ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b2:	e03e      	b.n	8004232 <UART_SetConfig+0x1ba>
 80041b4:	2304      	movs	r3, #4
 80041b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ba:	e03a      	b.n	8004232 <UART_SetConfig+0x1ba>
 80041bc:	2308      	movs	r3, #8
 80041be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c2:	e036      	b.n	8004232 <UART_SetConfig+0x1ba>
 80041c4:	2310      	movs	r3, #16
 80041c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ca:	e032      	b.n	8004232 <UART_SetConfig+0x1ba>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a6a      	ldr	r2, [pc, #424]	; (800437c <UART_SetConfig+0x304>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d12a      	bne.n	800422c <UART_SetConfig+0x1b4>
 80041d6:	4b6b      	ldr	r3, [pc, #428]	; (8004384 <UART_SetConfig+0x30c>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041e4:	d01a      	beq.n	800421c <UART_SetConfig+0x1a4>
 80041e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041ea:	d81b      	bhi.n	8004224 <UART_SetConfig+0x1ac>
 80041ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f0:	d00c      	beq.n	800420c <UART_SetConfig+0x194>
 80041f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f6:	d815      	bhi.n	8004224 <UART_SetConfig+0x1ac>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <UART_SetConfig+0x18c>
 80041fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004200:	d008      	beq.n	8004214 <UART_SetConfig+0x19c>
 8004202:	e00f      	b.n	8004224 <UART_SetConfig+0x1ac>
 8004204:	2300      	movs	r3, #0
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420a:	e012      	b.n	8004232 <UART_SetConfig+0x1ba>
 800420c:	2302      	movs	r3, #2
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004212:	e00e      	b.n	8004232 <UART_SetConfig+0x1ba>
 8004214:	2304      	movs	r3, #4
 8004216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421a:	e00a      	b.n	8004232 <UART_SetConfig+0x1ba>
 800421c:	2308      	movs	r3, #8
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004222:	e006      	b.n	8004232 <UART_SetConfig+0x1ba>
 8004224:	2310      	movs	r3, #16
 8004226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422a:	e002      	b.n	8004232 <UART_SetConfig+0x1ba>
 800422c:	2310      	movs	r3, #16
 800422e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a51      	ldr	r2, [pc, #324]	; (800437c <UART_SetConfig+0x304>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d17a      	bne.n	8004332 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800423c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004240:	2b08      	cmp	r3, #8
 8004242:	d824      	bhi.n	800428e <UART_SetConfig+0x216>
 8004244:	a201      	add	r2, pc, #4	; (adr r2, 800424c <UART_SetConfig+0x1d4>)
 8004246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424a:	bf00      	nop
 800424c:	08004271 	.word	0x08004271
 8004250:	0800428f 	.word	0x0800428f
 8004254:	08004279 	.word	0x08004279
 8004258:	0800428f 	.word	0x0800428f
 800425c:	0800427f 	.word	0x0800427f
 8004260:	0800428f 	.word	0x0800428f
 8004264:	0800428f 	.word	0x0800428f
 8004268:	0800428f 	.word	0x0800428f
 800426c:	08004287 	.word	0x08004287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004270:	f7fe f9ac 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8004274:	61f8      	str	r0, [r7, #28]
        break;
 8004276:	e010      	b.n	800429a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004278:	4b44      	ldr	r3, [pc, #272]	; (800438c <UART_SetConfig+0x314>)
 800427a:	61fb      	str	r3, [r7, #28]
        break;
 800427c:	e00d      	b.n	800429a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800427e:	f7fe f90d 	bl	800249c <HAL_RCC_GetSysClockFreq>
 8004282:	61f8      	str	r0, [r7, #28]
        break;
 8004284:	e009      	b.n	800429a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800428a:	61fb      	str	r3, [r7, #28]
        break;
 800428c:	e005      	b.n	800429a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004298:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8107 	beq.w	80044b0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	4413      	add	r3, r2
 80042ac:	69fa      	ldr	r2, [r7, #28]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d305      	bcc.n	80042be <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d903      	bls.n	80042c6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042c4:	e0f4      	b.n	80044b0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	2200      	movs	r2, #0
 80042ca:	461c      	mov	r4, r3
 80042cc:	4615      	mov	r5, r2
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	022b      	lsls	r3, r5, #8
 80042d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80042dc:	0222      	lsls	r2, r4, #8
 80042de:	68f9      	ldr	r1, [r7, #12]
 80042e0:	6849      	ldr	r1, [r1, #4]
 80042e2:	0849      	lsrs	r1, r1, #1
 80042e4:	2000      	movs	r0, #0
 80042e6:	4688      	mov	r8, r1
 80042e8:	4681      	mov	r9, r0
 80042ea:	eb12 0a08 	adds.w	sl, r2, r8
 80042ee:	eb43 0b09 	adc.w	fp, r3, r9
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	603b      	str	r3, [r7, #0]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004300:	4650      	mov	r0, sl
 8004302:	4659      	mov	r1, fp
 8004304:	f7fb ff62 	bl	80001cc <__aeabi_uldivmod>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4613      	mov	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004316:	d308      	bcc.n	800432a <UART_SetConfig+0x2b2>
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800431e:	d204      	bcs.n	800432a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	60da      	str	r2, [r3, #12]
 8004328:	e0c2      	b.n	80044b0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004330:	e0be      	b.n	80044b0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800433a:	d16a      	bne.n	8004412 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800433c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004340:	2b08      	cmp	r3, #8
 8004342:	d834      	bhi.n	80043ae <UART_SetConfig+0x336>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <UART_SetConfig+0x2d4>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	08004371 	.word	0x08004371
 8004350:	08004391 	.word	0x08004391
 8004354:	08004399 	.word	0x08004399
 8004358:	080043af 	.word	0x080043af
 800435c:	0800439f 	.word	0x0800439f
 8004360:	080043af 	.word	0x080043af
 8004364:	080043af 	.word	0x080043af
 8004368:	080043af 	.word	0x080043af
 800436c:	080043a7 	.word	0x080043a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004370:	f7fe f92c 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8004374:	61f8      	str	r0, [r7, #28]
        break;
 8004376:	e020      	b.n	80043ba <UART_SetConfig+0x342>
 8004378:	efff69f3 	.word	0xefff69f3
 800437c:	40008000 	.word	0x40008000
 8004380:	40013800 	.word	0x40013800
 8004384:	40021000 	.word	0x40021000
 8004388:	40004400 	.word	0x40004400
 800438c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004390:	f7fe f932 	bl	80025f8 <HAL_RCC_GetPCLK2Freq>
 8004394:	61f8      	str	r0, [r7, #28]
        break;
 8004396:	e010      	b.n	80043ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004398:	4b4c      	ldr	r3, [pc, #304]	; (80044cc <UART_SetConfig+0x454>)
 800439a:	61fb      	str	r3, [r7, #28]
        break;
 800439c:	e00d      	b.n	80043ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800439e:	f7fe f87d 	bl	800249c <HAL_RCC_GetSysClockFreq>
 80043a2:	61f8      	str	r0, [r7, #28]
        break;
 80043a4:	e009      	b.n	80043ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043aa:	61fb      	str	r3, [r7, #28]
        break;
 80043ac:	e005      	b.n	80043ba <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d077      	beq.n	80044b0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	005a      	lsls	r2, r3, #1
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	441a      	add	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b0f      	cmp	r3, #15
 80043da:	d916      	bls.n	800440a <UART_SetConfig+0x392>
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e2:	d212      	bcs.n	800440a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f023 030f 	bic.w	r3, r3, #15
 80043ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	8afb      	ldrh	r3, [r7, #22]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	8afa      	ldrh	r2, [r7, #22]
 8004406:	60da      	str	r2, [r3, #12]
 8004408:	e052      	b.n	80044b0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004410:	e04e      	b.n	80044b0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004412:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004416:	2b08      	cmp	r3, #8
 8004418:	d827      	bhi.n	800446a <UART_SetConfig+0x3f2>
 800441a:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <UART_SetConfig+0x3a8>)
 800441c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004420:	08004445 	.word	0x08004445
 8004424:	0800444d 	.word	0x0800444d
 8004428:	08004455 	.word	0x08004455
 800442c:	0800446b 	.word	0x0800446b
 8004430:	0800445b 	.word	0x0800445b
 8004434:	0800446b 	.word	0x0800446b
 8004438:	0800446b 	.word	0x0800446b
 800443c:	0800446b 	.word	0x0800446b
 8004440:	08004463 	.word	0x08004463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004444:	f7fe f8c2 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8004448:	61f8      	str	r0, [r7, #28]
        break;
 800444a:	e014      	b.n	8004476 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800444c:	f7fe f8d4 	bl	80025f8 <HAL_RCC_GetPCLK2Freq>
 8004450:	61f8      	str	r0, [r7, #28]
        break;
 8004452:	e010      	b.n	8004476 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004454:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <UART_SetConfig+0x454>)
 8004456:	61fb      	str	r3, [r7, #28]
        break;
 8004458:	e00d      	b.n	8004476 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800445a:	f7fe f81f 	bl	800249c <HAL_RCC_GetSysClockFreq>
 800445e:	61f8      	str	r0, [r7, #28]
        break;
 8004460:	e009      	b.n	8004476 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004466:	61fb      	str	r3, [r7, #28]
        break;
 8004468:	e005      	b.n	8004476 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004474:	bf00      	nop
    }

    if (pclk != 0U)
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d019      	beq.n	80044b0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	085a      	lsrs	r2, r3, #1
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	441a      	add	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	fbb2 f3f3 	udiv	r3, r2, r3
 800448e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b0f      	cmp	r3, #15
 8004494:	d909      	bls.n	80044aa <UART_SetConfig+0x432>
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449c:	d205      	bcs.n	80044aa <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60da      	str	r2, [r3, #12]
 80044a8:	e002      	b.n	80044b0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3728      	adds	r7, #40	; 0x28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ca:	bf00      	nop
 80044cc:	00f42400 	.word	0x00f42400

080044d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01a      	beq.n	80045e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ce:	d10a      	bne.n	80045e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	605a      	str	r2, [r3, #4]
  }
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af02      	add	r7, sp, #8
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004624:	f7fc fd1a 	bl	800105c <HAL_GetTick>
 8004628:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b08      	cmp	r3, #8
 8004636:	d10e      	bne.n	8004656 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004638:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f82d 	bl	80046a6 <UART_WaitOnFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e023      	b.n	800469e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b04      	cmp	r3, #4
 8004662:	d10e      	bne.n	8004682 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f817 	bl	80046a6 <UART_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e00d      	b.n	800469e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b09c      	sub	sp, #112	; 0x70
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	4613      	mov	r3, r2
 80046b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b6:	e0a5      	b.n	8004804 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046be:	f000 80a1 	beq.w	8004804 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c2:	f7fc fccb 	bl	800105c <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d302      	bcc.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80046d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d13e      	bne.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046ec:	667b      	str	r3, [r7, #100]	; 0x64
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e6      	bne.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3308      	adds	r3, #8
 8004710:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	663b      	str	r3, [r7, #96]	; 0x60
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3308      	adds	r3, #8
 8004728:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800472a:	64ba      	str	r2, [r7, #72]	; 0x48
 800472c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e5      	bne.n	800470a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2220      	movs	r2, #32
 8004742:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e067      	b.n	8004826 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d04f      	beq.n	8004804 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800476e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004772:	d147      	bne.n	8004804 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800477c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004792:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
 800479e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e6      	bne.n	800477e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3308      	adds	r3, #8
 80047b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	613b      	str	r3, [r7, #16]
   return(result);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3308      	adds	r3, #8
 80047ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047d0:	623a      	str	r2, [r7, #32]
 80047d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	69f9      	ldr	r1, [r7, #28]
 80047d6:	6a3a      	ldr	r2, [r7, #32]
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e5      	bne.n	80047b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e010      	b.n	8004826 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69da      	ldr	r2, [r3, #28]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4013      	ands	r3, r2
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	429a      	cmp	r2, r3
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	429a      	cmp	r2, r3
 8004820:	f43f af4a 	beq.w	80046b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3770      	adds	r7, #112	; 0x70
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <__errno>:
 8004830:	4b01      	ldr	r3, [pc, #4]	; (8004838 <__errno+0x8>)
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	2000000c 	.word	0x2000000c

0800483c <__libc_init_array>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	4d0d      	ldr	r5, [pc, #52]	; (8004874 <__libc_init_array+0x38>)
 8004840:	4c0d      	ldr	r4, [pc, #52]	; (8004878 <__libc_init_array+0x3c>)
 8004842:	1b64      	subs	r4, r4, r5
 8004844:	10a4      	asrs	r4, r4, #2
 8004846:	2600      	movs	r6, #0
 8004848:	42a6      	cmp	r6, r4
 800484a:	d109      	bne.n	8004860 <__libc_init_array+0x24>
 800484c:	4d0b      	ldr	r5, [pc, #44]	; (800487c <__libc_init_array+0x40>)
 800484e:	4c0c      	ldr	r4, [pc, #48]	; (8004880 <__libc_init_array+0x44>)
 8004850:	f000 f8da 	bl	8004a08 <_init>
 8004854:	1b64      	subs	r4, r4, r5
 8004856:	10a4      	asrs	r4, r4, #2
 8004858:	2600      	movs	r6, #0
 800485a:	42a6      	cmp	r6, r4
 800485c:	d105      	bne.n	800486a <__libc_init_array+0x2e>
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	f855 3b04 	ldr.w	r3, [r5], #4
 8004864:	4798      	blx	r3
 8004866:	3601      	adds	r6, #1
 8004868:	e7ee      	b.n	8004848 <__libc_init_array+0xc>
 800486a:	f855 3b04 	ldr.w	r3, [r5], #4
 800486e:	4798      	blx	r3
 8004870:	3601      	adds	r6, #1
 8004872:	e7f2      	b.n	800485a <__libc_init_array+0x1e>
 8004874:	08004a70 	.word	0x08004a70
 8004878:	08004a70 	.word	0x08004a70
 800487c:	08004a70 	.word	0x08004a70
 8004880:	08004a74 	.word	0x08004a74

08004884 <malloc>:
 8004884:	4b02      	ldr	r3, [pc, #8]	; (8004890 <malloc+0xc>)
 8004886:	4601      	mov	r1, r0
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	f000 b82b 	b.w	80048e4 <_malloc_r>
 800488e:	bf00      	nop
 8004890:	2000000c 	.word	0x2000000c

08004894 <memset>:
 8004894:	4402      	add	r2, r0
 8004896:	4603      	mov	r3, r0
 8004898:	4293      	cmp	r3, r2
 800489a:	d100      	bne.n	800489e <memset+0xa>
 800489c:	4770      	bx	lr
 800489e:	f803 1b01 	strb.w	r1, [r3], #1
 80048a2:	e7f9      	b.n	8004898 <memset+0x4>

080048a4 <sbrk_aligned>:
 80048a4:	b570      	push	{r4, r5, r6, lr}
 80048a6:	4e0e      	ldr	r6, [pc, #56]	; (80048e0 <sbrk_aligned+0x3c>)
 80048a8:	460c      	mov	r4, r1
 80048aa:	6831      	ldr	r1, [r6, #0]
 80048ac:	4605      	mov	r5, r0
 80048ae:	b911      	cbnz	r1, 80048b6 <sbrk_aligned+0x12>
 80048b0:	f000 f88c 	bl	80049cc <_sbrk_r>
 80048b4:	6030      	str	r0, [r6, #0]
 80048b6:	4621      	mov	r1, r4
 80048b8:	4628      	mov	r0, r5
 80048ba:	f000 f887 	bl	80049cc <_sbrk_r>
 80048be:	1c43      	adds	r3, r0, #1
 80048c0:	d00a      	beq.n	80048d8 <sbrk_aligned+0x34>
 80048c2:	1cc4      	adds	r4, r0, #3
 80048c4:	f024 0403 	bic.w	r4, r4, #3
 80048c8:	42a0      	cmp	r0, r4
 80048ca:	d007      	beq.n	80048dc <sbrk_aligned+0x38>
 80048cc:	1a21      	subs	r1, r4, r0
 80048ce:	4628      	mov	r0, r5
 80048d0:	f000 f87c 	bl	80049cc <_sbrk_r>
 80048d4:	3001      	adds	r0, #1
 80048d6:	d101      	bne.n	80048dc <sbrk_aligned+0x38>
 80048d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80048dc:	4620      	mov	r0, r4
 80048de:	bd70      	pop	{r4, r5, r6, pc}
 80048e0:	200001bc 	.word	0x200001bc

080048e4 <_malloc_r>:
 80048e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e8:	1ccd      	adds	r5, r1, #3
 80048ea:	f025 0503 	bic.w	r5, r5, #3
 80048ee:	3508      	adds	r5, #8
 80048f0:	2d0c      	cmp	r5, #12
 80048f2:	bf38      	it	cc
 80048f4:	250c      	movcc	r5, #12
 80048f6:	2d00      	cmp	r5, #0
 80048f8:	4607      	mov	r7, r0
 80048fa:	db01      	blt.n	8004900 <_malloc_r+0x1c>
 80048fc:	42a9      	cmp	r1, r5
 80048fe:	d905      	bls.n	800490c <_malloc_r+0x28>
 8004900:	230c      	movs	r3, #12
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	2600      	movs	r6, #0
 8004906:	4630      	mov	r0, r6
 8004908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800490c:	4e2e      	ldr	r6, [pc, #184]	; (80049c8 <_malloc_r+0xe4>)
 800490e:	f000 f86d 	bl	80049ec <__malloc_lock>
 8004912:	6833      	ldr	r3, [r6, #0]
 8004914:	461c      	mov	r4, r3
 8004916:	bb34      	cbnz	r4, 8004966 <_malloc_r+0x82>
 8004918:	4629      	mov	r1, r5
 800491a:	4638      	mov	r0, r7
 800491c:	f7ff ffc2 	bl	80048a4 <sbrk_aligned>
 8004920:	1c43      	adds	r3, r0, #1
 8004922:	4604      	mov	r4, r0
 8004924:	d14d      	bne.n	80049c2 <_malloc_r+0xde>
 8004926:	6834      	ldr	r4, [r6, #0]
 8004928:	4626      	mov	r6, r4
 800492a:	2e00      	cmp	r6, #0
 800492c:	d140      	bne.n	80049b0 <_malloc_r+0xcc>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	4631      	mov	r1, r6
 8004932:	4638      	mov	r0, r7
 8004934:	eb04 0803 	add.w	r8, r4, r3
 8004938:	f000 f848 	bl	80049cc <_sbrk_r>
 800493c:	4580      	cmp	r8, r0
 800493e:	d13a      	bne.n	80049b6 <_malloc_r+0xd2>
 8004940:	6821      	ldr	r1, [r4, #0]
 8004942:	3503      	adds	r5, #3
 8004944:	1a6d      	subs	r5, r5, r1
 8004946:	f025 0503 	bic.w	r5, r5, #3
 800494a:	3508      	adds	r5, #8
 800494c:	2d0c      	cmp	r5, #12
 800494e:	bf38      	it	cc
 8004950:	250c      	movcc	r5, #12
 8004952:	4629      	mov	r1, r5
 8004954:	4638      	mov	r0, r7
 8004956:	f7ff ffa5 	bl	80048a4 <sbrk_aligned>
 800495a:	3001      	adds	r0, #1
 800495c:	d02b      	beq.n	80049b6 <_malloc_r+0xd2>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	442b      	add	r3, r5
 8004962:	6023      	str	r3, [r4, #0]
 8004964:	e00e      	b.n	8004984 <_malloc_r+0xa0>
 8004966:	6822      	ldr	r2, [r4, #0]
 8004968:	1b52      	subs	r2, r2, r5
 800496a:	d41e      	bmi.n	80049aa <_malloc_r+0xc6>
 800496c:	2a0b      	cmp	r2, #11
 800496e:	d916      	bls.n	800499e <_malloc_r+0xba>
 8004970:	1961      	adds	r1, r4, r5
 8004972:	42a3      	cmp	r3, r4
 8004974:	6025      	str	r5, [r4, #0]
 8004976:	bf18      	it	ne
 8004978:	6059      	strne	r1, [r3, #4]
 800497a:	6863      	ldr	r3, [r4, #4]
 800497c:	bf08      	it	eq
 800497e:	6031      	streq	r1, [r6, #0]
 8004980:	5162      	str	r2, [r4, r5]
 8004982:	604b      	str	r3, [r1, #4]
 8004984:	4638      	mov	r0, r7
 8004986:	f104 060b 	add.w	r6, r4, #11
 800498a:	f000 f835 	bl	80049f8 <__malloc_unlock>
 800498e:	f026 0607 	bic.w	r6, r6, #7
 8004992:	1d23      	adds	r3, r4, #4
 8004994:	1af2      	subs	r2, r6, r3
 8004996:	d0b6      	beq.n	8004906 <_malloc_r+0x22>
 8004998:	1b9b      	subs	r3, r3, r6
 800499a:	50a3      	str	r3, [r4, r2]
 800499c:	e7b3      	b.n	8004906 <_malloc_r+0x22>
 800499e:	6862      	ldr	r2, [r4, #4]
 80049a0:	42a3      	cmp	r3, r4
 80049a2:	bf0c      	ite	eq
 80049a4:	6032      	streq	r2, [r6, #0]
 80049a6:	605a      	strne	r2, [r3, #4]
 80049a8:	e7ec      	b.n	8004984 <_malloc_r+0xa0>
 80049aa:	4623      	mov	r3, r4
 80049ac:	6864      	ldr	r4, [r4, #4]
 80049ae:	e7b2      	b.n	8004916 <_malloc_r+0x32>
 80049b0:	4634      	mov	r4, r6
 80049b2:	6876      	ldr	r6, [r6, #4]
 80049b4:	e7b9      	b.n	800492a <_malloc_r+0x46>
 80049b6:	230c      	movs	r3, #12
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	4638      	mov	r0, r7
 80049bc:	f000 f81c 	bl	80049f8 <__malloc_unlock>
 80049c0:	e7a1      	b.n	8004906 <_malloc_r+0x22>
 80049c2:	6025      	str	r5, [r4, #0]
 80049c4:	e7de      	b.n	8004984 <_malloc_r+0xa0>
 80049c6:	bf00      	nop
 80049c8:	200001b8 	.word	0x200001b8

080049cc <_sbrk_r>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	4d06      	ldr	r5, [pc, #24]	; (80049e8 <_sbrk_r+0x1c>)
 80049d0:	2300      	movs	r3, #0
 80049d2:	4604      	mov	r4, r0
 80049d4:	4608      	mov	r0, r1
 80049d6:	602b      	str	r3, [r5, #0]
 80049d8:	f7fc f846 	bl	8000a68 <_sbrk>
 80049dc:	1c43      	adds	r3, r0, #1
 80049de:	d102      	bne.n	80049e6 <_sbrk_r+0x1a>
 80049e0:	682b      	ldr	r3, [r5, #0]
 80049e2:	b103      	cbz	r3, 80049e6 <_sbrk_r+0x1a>
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	bd38      	pop	{r3, r4, r5, pc}
 80049e8:	200001c0 	.word	0x200001c0

080049ec <__malloc_lock>:
 80049ec:	4801      	ldr	r0, [pc, #4]	; (80049f4 <__malloc_lock+0x8>)
 80049ee:	f000 b809 	b.w	8004a04 <__retarget_lock_acquire_recursive>
 80049f2:	bf00      	nop
 80049f4:	200001c4 	.word	0x200001c4

080049f8 <__malloc_unlock>:
 80049f8:	4801      	ldr	r0, [pc, #4]	; (8004a00 <__malloc_unlock+0x8>)
 80049fa:	f000 b804 	b.w	8004a06 <__retarget_lock_release_recursive>
 80049fe:	bf00      	nop
 8004a00:	200001c4 	.word	0x200001c4

08004a04 <__retarget_lock_acquire_recursive>:
 8004a04:	4770      	bx	lr

08004a06 <__retarget_lock_release_recursive>:
 8004a06:	4770      	bx	lr

08004a08 <_init>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	bf00      	nop
 8004a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0e:	bc08      	pop	{r3}
 8004a10:	469e      	mov	lr, r3
 8004a12:	4770      	bx	lr

08004a14 <_fini>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	bf00      	nop
 8004a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1a:	bc08      	pop	{r3}
 8004a1c:	469e      	mov	lr, r3
 8004a1e:	4770      	bx	lr
